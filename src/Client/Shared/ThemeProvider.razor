@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="CustomTheme" />
<MudToggleIconButton ToggledIcon="@Icons.Material.Filled.DarkMode"
                     ToggledColor="@Color.Dark"
                     ToggledTitle="MÃ¸rkt tema"
                     Icon="@Icons.Material.Filled.LightMode"
                     Color="@Color.Warning"
                     Title="Lyst tema"
                     ToggledChanged="SaveThemePreference"
                     Toggled="_isDarkMode"/>
@code {
    bool _isDarkMode = true;
    const string Key = "dark-mode";
    MudThemeProvider _mudThemeProvider = new();

    static readonly MudTheme CustomTheme = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();

            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);

            var savedMode = await LocalStorage.GetItemAsync<bool?>(Key);
            if (savedMode.HasValue)
            {
                _isDarkMode = savedMode.Value;
            }

            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;

        await LocalStorage.SetItemAsync(Key, _isDarkMode);

        StateHasChanged();
    }

    private async Task SaveThemePreference(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;

        await LocalStorage.SetItemAsync(Key, _isDarkMode);

        StateHasChanged();
    }

}
