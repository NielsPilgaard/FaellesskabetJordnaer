@page "/profile"
@using MudExtensions.Enums
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (_userProfile is null || _userId is null)
{
    <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true" StrokeWidth="2" />
    return;
}

<EditForm Model="@_userProfile" OnValidSubmit="UpdateUserProfile">

    <DataAnnotationsValidator />

    <MudPaper Elevation="3" Class="pa-4">

        @*TODO: MudImage should be clickable, or have an overlay so we can add an image*@
        <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@(_userProfile.ProfilePictureUrl?? "https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp")" Alt="@($"Billede af {_userProfile.FirstName}")" />
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField For="() => _userProfile.FirstName" @bind-Value="@_userProfile.FirstName" Label="Fornavn" Variant="Variant.Text" InputType="InputType.Text" name="name" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField For="() => _userProfile.LastName" @bind-Value="@_userProfile.LastName" Label="Efternavn" Variant="Variant.Text" InputType="InputType.Text" name="lastname" />
            </MudItem>
            @*<MudItem xs="12" sm="12">
            <MudTextField For="() => _userProfile.Address" @bind-Value="@_userProfile.Address" Label="Adresse" Variant="Variant.Text" InputType="InputType.Text" name="address" />
            </MudItem>*@
            <MudItem xs="12" sm="6">
                <MudTextField For="() => _userProfile.ZipCode" @bind-Value="@_userProfile.ZipCode" Label="Postnummer" Variant="Variant.Text" InputType="InputType.Number" name="zipcode" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField For="() => _userProfile.City" @bind-Value="@_userProfile.City" Label="By" Variant="Variant.Text" InputType="InputType.Text" name="city" />
            </MudItem>
            @*<MudItem xs="12" sm="6">
            <MudTextField For="() => _userProfile.PhoneNumber" @bind-Value="@_userProfile.PhoneNumber" Label="Telefon Nr." Variant="Variant.Text" InputType="InputType.Telephone" />
            </MudItem>*@
            <MudItem xs="12" sm="6">
                <MudDatePicker For="() => _userProfile.DateOfBirth" AnchorOrigin="Origin.BottomLeft" @bind-Date="@_userProfile.DateOfBirth" Label="Fødselsdato" />
            </MudItem>

        </MudGrid>

        <MudSelectExtended Dense
                           ItemCollection="_lookingFor.Select(e=>e.Name).ToList()"
                           T="string"
                           Class="pt-6"
                           Label="Interesseret i"
                           MultiSelection="true"
                           SelectedValues="_userProfile.LookingFor.Select(e => e.Name)"
                           ValuePresenter="ValuePresenter.Chip"
                           SelectedValuesChanged="SelectedLookingForChanged">
        </MudSelectExtended>

        <MudTextFieldExtended For="() => _userProfile.Description" Class="pt-6" AutoSize Lines="3" Immediate @bind-Value="@_userProfile.Description" Placeholder="Du kan eksempelvis fortælle om dine interesser, uddanelse, familie, børnesyn, værdier og den slags." Label="Beskrivelse" Variant="Variant.Text" InputType="InputType.Text" />


    </MudPaper>

    <SubmitButton />

    <EditChildProfileTabs @bind-Parent="_userProfile"></EditChildProfileTabs>

    <SubmitButton />

</EditForm>

@code {
    private UserProfile? _userProfile;
    private string? _userId;
    private IEnumerable<LookingFor> _lookingFor = Enumerable.Empty<LookingFor>();

    private readonly Action<SnackbarOptions> _snackbarOptions = options =>
    {
        options.CloseAfterNavigation = true;
        options.VisibleStateDuration = 3000;
        options.ShowTransitionDuration = 250;
    };


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _userId = authenticationState.User.GetId();

        var userProfile = await HttpClient.GetFromJsonAsync<UserProfile>($"api/profiles/{_userId}");
        if (userProfile is null)
        {

            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }

        await GetLookingFor();

        _userProfile = userProfile;
    }

    private async Task GetLookingFor()
    {
        var result = await HttpClient.GetFromJsonAsync<List<LookingFor>>("api/looking-for");
        if (result is null)
        {
            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }
        _lookingFor = result;
    }

    private async Task UpdateUserProfile()
    {
        var response = await HttpClient.PutAsJsonAsync($"api/profiles/{_userProfile!.Id}", _userProfile);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Dine oplysninger er blevet gemt.", Severity.Success, _snackbarOptions);
            return;
        }
        Snackbar.Add("Det lykkedes ikke at opdatere dine informationer. Vent et øjeblik før du prøver igen.", Severity.Warning, _snackbarOptions);
    }

    private void SelectedLookingForChanged(IEnumerable<string> lookingFor)
    {
        _userProfile!.LookingFor = _lookingFor.Where(e => lookingFor.Contains(e.Name)).ToList();
    }
}
