@page "/profile"
@using Jordnaer.Shared
@using Microsoft.Extensions.Caching.Memory
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IMemoryCache Cache
@attribute [Authorize]

@if (_userProfile is null || _userId is null)
{
    <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true" StrokeWidth="2" />
    return;
}

<EditForm Model="@_userProfile" OnValidSubmit="UpdateUserProfile">

    <DataAnnotationsValidator />

    <MudPaper Elevation="3" Class="pa-4">
        <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@_userProfile.ProfilePictureUrl" />
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="@_userProfile.FirstName" Label="Fornavn" Variant="Variant.Text" InputType="InputType.Text" name="name" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="@_userProfile.LastName" Label="Efternavn" Variant="Variant.Text" InputType="InputType.Text" name="lastname" />
            </MudItem>
        </MudGrid>
        <MudTextField @bind-Value="@_userProfile.Address" Label="Adresse" Variant="Variant.Text" InputType="InputType.Text" name="address" />

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="@_userProfile.ZipCode" Label="Postnummer" Variant="Variant.Text" InputType="InputType.Number" name="zipcode" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="@_userProfile.City" Label="By" Variant="Variant.Text" InputType="InputType.Text" name="city" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="@_userProfile.PhoneNumber" Label="Telefon Nr." Variant="Variant.Text" InputType="InputType.Telephone" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="@_userProfile.DateOfBirth" Label="Fødselsdato" />
            </MudItem>
        </MudGrid>

        <MudSelect Dense
                   T="string"
                   Label="Interesseret i"
                   MultiSelection="true"
                   SelectedValues="_userProfile.LookingFor.Select(e => e.Name)"
                   SelectedValuesChanged="SelectedLookingForChanged">
            @foreach (var lookingFor in _lookingFor)
            {
                <MudSelectItem T="string" Value="lookingFor.Name">@lookingFor</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="@_userProfile.Description" Label="Beskrivelse" Variant="Variant.Text" InputType="InputType.Text" />

        <!-- TODO: Add other fields for LookingFor and ChildProfiles -->

        <MudButton Size="Size.Large"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="mt-3"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Gem
        </MudButton>
    </MudPaper>
</EditForm>

@code {
    private UserProfileDto? _userProfile;
    private string? _userId;
    private IEnumerable<LookingFor> _lookingFor = Enumerable.Empty<LookingFor>();

    private readonly Action<SnackbarOptions> _snackbarOptions = options =>
    {
        options.CloseAfterNavigation = true;
        options.VisibleStateDuration = 3000;
        options.ShowTransitionDuration = 250;
    };

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _userId = authenticationState.User.GetId();

        var userProfileDto = await HttpClient.GetFromJsonAsync<UserProfileDto>($"api/profiles/{_userId}");
        if (userProfileDto is null)
        {

            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }

        await GetLookingFor();

        _userProfile = userProfileDto;
    }

    private async Task GetLookingFor()
    {
        var result = await HttpClient.GetFromJsonAsync<List<LookingFor>>("api/looking-for");
        if (result is null)
        {
            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }
        _lookingFor = result;
    }

    private async Task UpdateUserProfile()
    {
        var response = await HttpClient.PutAsJsonAsync($"api/profiles/{_userProfile!.Id}", _userProfile);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Dine oplysninger er blevet gemt.", Severity.Success, _snackbarOptions);
            return;
        }
        Snackbar.Add("Det lykkedes ikke at opdatere dine informationer. Vent et øjeblik før du prøver igen.", Severity.Warning, _snackbarOptions);
    }

    private void SelectedLookingForChanged(IEnumerable<string> lookingFor)
    {
        _userProfile!.LookingFor = _lookingFor.Where(e => lookingFor.Contains(e.Name)).ToList();
    }

}
