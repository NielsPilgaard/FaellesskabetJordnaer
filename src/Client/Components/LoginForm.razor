@using RemindMeApp.Client.Authentication
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel

@inject AuthStateProvider Client
@inject NavigationManager NavigationManager


@*<EditForm Model="@this" class="form-horizontal py-5" OnValidSubmit="@LoginUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="username" class="form-label">User name</label>
        <InputText id="username" class="form-control" @bind-Value="Email" />
        <ValidationMessage For="@(() => Email)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
        <ValidationMessage For="@(() => Password)" />
    </div>
    <div>
        <button class="btn btn-primary">Login</button>
        <button type="button" class="btn btn-secondary" @onclick="@Create">Create User</button>
    </div>
</EditForm>*@

<MudCard Elevation="3">
    <MudCardContent>
        <MudForm>
            <MudTextField Label="Email" @bind-Value="Email" InputType="InputType.Email" />
            <MudTextField Label="Password" @bind-Value="Password" InputType="InputType.Password" />
            <MudCheckBox Label="Remember me" @bind-Checked="RememberMe" />
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@HandleLogin">Login</MudButton>
        </MudForm>
    </MudCardContent>
</MudCard>

@if (!string.IsNullOrEmpty(_alertMessage))
{
    <div class="alert alert-danger">@_alertMessage</div>
}

@code {
    string? _alertMessage;

    [Required]
    [EmailAddress]
    public string? Email { get; set; }

    [Required]
    [PasswordPropertyText]
    [StringLength(32, MinimumLength = 6, ErrorMessage = "The password must be between 6 and 32 characters long.")]
    [RegularExpression("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[^a-zA-Z\\d]).*$",
        MatchTimeoutInMilliseconds = 1000,
        ErrorMessage = "The password must contain a lower-case letter, an upper-case letter, a digit and a special character.")]
    public string? Password { get; set; }

    public bool RememberMe { get; set; }

    async Task HandleLogin()
    {
        _alertMessage = null;
        if (await Client.LoginAsync(Email, Password))
        {
            NavigationManager.NavigateTo("");
        }
        else
        {
            _alertMessage = "Login failed";
        }
    }
}
