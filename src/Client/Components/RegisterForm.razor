@using RemindMeApp.Client.Authentication
@using System.ComponentModel.DataAnnotations

@inject AuthStateProvider Client

<MudCard Elevation="3">
    <MudCardContent>
        <MudForm> 
            <MudTextField Label="Email" @bind-Value="Email" InputType="InputType.Email" />
            <MudTextField Label="Password" @bind-Value="Password" InputType="InputType.Password" autocomplete="new-password" />
            <MudTextField Label="Repeat Password" @bind-Value="RepeatPassword" InputType="InputType.Password" autocomplete="new-password" />
            <MudButton Class="mt-3 " Color="Color.Primary" Variant="Variant.Filled" OnClick="@Create">Create Account</MudButton>
        </MudForm>
    </MudCardContent>
</MudCard>

@if (!string.IsNullOrEmpty(_alertMessage))
{
    <div class="alert alert-danger">@_alertMessage</div>
}

@code {
    string? _alertMessage;

    [Required]
    [EmailAddress]
    public string? Email { get; set; }

    [Required]
    [StringLength(32, MinimumLength = 6, ErrorMessage = "The password must be between 6 and 32 characters long.")]
    [RegularExpression("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z])(?=.*[^a-zA-Z\\d]).*$",
        MatchTimeoutInMilliseconds = 1000,
        ErrorMessage = "The password must contain a lower-case letter, an upper-case letter, a digit and a special character.")]
    public string? Password { get; set; }

    [Required]
    [Compare(nameof(Password))]
    public string? RepeatPassword { get; set; }

    async Task Create()
    {
        _alertMessage = null;
        if (!await Client.CreateUserAsync(Email, Password))
        {
            _alertMessage = "Failed to create user";
        }
    }
}
