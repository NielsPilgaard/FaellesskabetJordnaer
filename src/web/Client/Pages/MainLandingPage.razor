@page "/"
@using MudExtensions.Enums
@attribute [Layout(typeof(NoLayout))]
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (!_authenticationStateLoaded)
{
    return;
}
<MudPage FullScreen="FullScreen.FullWithoutAppbar" Row="5" Column="5" Height="1200px" Style="background: var(--mud-palette-background-grey)">
    <MudSection Row="1" ColSpan="2" Column="1" Class="d-flex justify-center align-center">
        <MudImage Height="200" Src="/images/minimoeder_logo.png" />
    </MudSection>
    <MudSection Row="2" Column="1" ColSpan="5" Style="@($"background: {JordnaerPalette.DimBackground}")" />

    <MudSection Row="1" ColSpan="3" Column="3" Class="d-flex justify-center align-center">
        <MudToolBar>
            <MudNavLink>Events</MudNavLink>
            <MudNavLink>Grupper</MudNavLink>
            <MudNavLink>Brugere</MudNavLink>
            <MudNavLink>Kontakt</MudNavLink>
        </MudToolBar>
    </MudSection>
    <MudSection Row="2" Column="2" ColSpan="3" RowSpan="2" Class="d-flex justify-center align-center">
        <MudImage Height="480" Class="clip-path-image" Src="/images/nathan-dumlao-P5MXtYfgmmw-unsplash.jpg" />
    </MudSection>
</MudPage>
<MudAlert Severity="Severity.Info" Class="mt-4">
    <MudText Typo="Typo.body1">
        Mini Møder er under opbygning.
    </MudText>
</MudAlert>

<MudPaper Elevation="3" Class="pa-6 my-4">
    <MudText Typo="Typo.body1">
        Mini Møder er en tryg og hyggelig platform,
        der gør det nemt at planlægge legeaftaler, hjemmeskoling og lignende i en hjertevarm atmosfære.
        <MudSpacer />
        Vi fokuserer på at styrke børns sociale netværk og læring gennem sjove aktiviteter og fællesskab.
        <MudSpacer />
        Med Mini Møder er det enkelt at samles, udforske, lære og skabe minder sammen i trygge og nærværende rammer.
    </MudText>
</MudPaper>

@code
{
    private bool _authenticationStateLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState.User.Identity?.IsAuthenticated is true)
        {
            Navigation.NavigateTo("/personal");
        }

        _authenticationStateLoaded = true;
    }
}
