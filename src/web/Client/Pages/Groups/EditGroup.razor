@page "/groups/edit/{GroupId:guid}"

@using MudExtensions.Enums
@using Jordnaer.Client.Features.Groups
@inject IGroupClient GroupClient
@inject ICategoryCache CategoryCache
@inject ISnackbar Snackbar

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    <EditForm Model="@_group" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <MudPaper Elevation="3" Class="pa-4">

            <GroupProfilePicture @bind-Group="_group" />

            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.Name"
                                  For="() => _group.Name"
                                  Label="Gruppenavn"
                                  Required="true"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.Address"
                                  For="() => _group.Address"
                                  Label="Adresse"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.ZipCode"
                                  For="() => _group.ZipCode"
                                  Label="Postnummer"
                                  name="zipCode"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.City"
                                  For="() => _group.City"
                                  Label="By"
                                  name="city"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_group.ShortDescription"
                                  For="() => _group.ShortDescription"
                                  Label="Kort beskrivelse"
                                  Lines="2"
                                  Required="true"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_group.Description"
                                  For="() => _group.Description"
                                  Label="Beskrivelse"
                                  Lines="10"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelectExtended ItemCollection="_categories.Select(e => e.Name).ToList()"
                                       T="string"
                                       Label="Kategori"
                                       MultiSelection="true"
                                       SelectedValues="_group.Categories.Select(e => e.Name)"
                                       ValuePresenter="ValuePresenter.Chip"
                                       SelectedValuesChanged="SelectedCategoriesChanged">
                    </MudSelectExtended>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudButton Size="Size.Large"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="my-6"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   FullWidth
                   Color="Color.Primary">
            Opret
        </MudButton>
    </EditForm>
</MudLoading>

@code {
    [Parameter]
    public Guid GroupId { get; set; }

    private Group _group;

    private IEnumerable<Category> _categories = Enumerable.Empty<Category>();
    private bool _isLoading = true;

    private readonly Action<SnackbarOptions> _snackbarOptions = options =>
    {
        options.CloseAfterNavigation = true;
        options.VisibleStateDuration = 3000;
        options.ShowTransitionDuration = 250;
    };

    protected override async Task OnInitializedAsync()
    {
        var group = await GroupClient.GetGroupByIdAsync(GroupId);
        switch (group.StatusCode)
        {
            case var _ when group is {IsSuccessStatusCode: true,Content: not null}:
                _group = group.Content;
                break;
            case HttpStatusCode.NotFound:
                Snackbar.Add("Det lykkedes ikke at finde gruppen.",
                    Severity.Warning, _snackbarOptions);
                break;
            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh,
                    Severity.Warning, _snackbarOptions);
                break;
        }

        _isLoading = false;

        _categories = await CategoryCache.GetOrCreateCategoriesAsync();
    }

    private void SelectedCategoriesChanged(IEnumerable<string> categories)
    {
        _group.Categories = _categories.Where(e => categories.Contains(e.Name)).ToList();
    }

    private Task Update()
    {
        _isLoading = true;
        _isLoading = false;

        return Task.CompletedTask;
    }

}
