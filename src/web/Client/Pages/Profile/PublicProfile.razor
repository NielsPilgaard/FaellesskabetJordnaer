@page "/{userName}"

@inject ISnackbar Snackbar
@inject IProfileClient ProfileClient
@inject IJSRuntime JsRuntime

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    @if (_profile is null && _isLoading is false)
    {
        <NotFoundComponent />
        return;
    }
    @if (_profile is null)
    {
        return;
    }

    <MetadataComponent Title="@($"{UserName}'s profil")"
                       Description="@($"Beskrivelse af {UserName}:\n {_profile?.Description}")"
                       Image="@_profile?.ProfilePictureUrl" />

    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="GoBack" />

    @*
        TODO: This button should open a popup that starts a chat with the person when the message is sent
    *@
    <MudButton EndIcon="@Icons.Material.Filled.Message">Send Besked</MudButton>

    <MudPaper Elevation="1" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <UserProfileCard Profile="_profile" UserName="@UserName" />
            </MudItem>

            @if (_profile!.ChildProfiles.Any())
            {
                <MudDivider Class="my-5" />
                <MudText Typo="Typo.h5" Class="d-sm-none mt-3">
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.ChildCare" />BÃ¸rn
                </MudText>

                foreach (var child in _profile.ChildProfiles)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <ChildProfileCard Child="child" />
                    </MudItem>
                }
            }

            @if (_profile.LookingFor.Any())
            {
                <MudDivider Class="my-5" />
                <MudItem xs="12">
                    <MudText Typo="Typo.h5"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Interesseret i</MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-start">
                    <MudChipSet ReadOnly>
                    @foreach (var lookingFor in _profile.LookingFor)
                        {
                            <MudChip Color="Color.Tertiary">@lookingFor</MudChip>
                        }
                    </MudChipSet>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</MudLoading>

@code {
    private ProfileDto? _profile;
    private bool _isLoading = true;

    [Parameter]
    public required string UserName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ProfileClient.GetUserProfile(UserName);

        switch (response.StatusCode)
        {
            case var _ when response.IsSuccessStatusCode:
                _profile = response.Content;
                break;
            case HttpStatusCode.NotFound:
                break;
            case HttpStatusCode.TooManyRequests:
                Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                break;
            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                break;
        }

        _isLoading = false;
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}
