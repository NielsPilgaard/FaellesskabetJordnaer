@page "/profile"
@using MudExtensions.Enums
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (_userProfile is null)
{
    <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true" StrokeWidth="2" />
    return;
}

<EditForm Model="@_userProfile" OnValidSubmit="UpdateUserProfile">

    <DataAnnotationsValidator />

    <MudPaper Elevation="3" Class="pa-4">

        @*TODO: MudImage should be clickable, or have an overlay so we can add an image*@
        <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@_userProfile.ProfilePictureUrl" Alt="@($"{_userProfile.FirstName}'s profilebillede")" />
        <MudGrid>

            <MudItem xs="12" sm="4">
                <MudTextField Adornment="Adornment.Start" AdornmentText="@("@")" Required For="() => _userProfile.UserName" @bind-Value="@_userProfile.UserName" Label="Brugernavn" Variant="Variant.Text" InputType="InputType.Text" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField For="() => _userProfile.FirstName" @bind-Value="@_userProfile.FirstName" Label="Fornavn" Variant="Variant.Text" InputType="InputType.Text" name="name" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField For="() => _userProfile.LastName" @bind-Value="@_userProfile.LastName" Label="Efternavn" Variant="Variant.Text" InputType="InputType.Text" name="lastname" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField For="() => _userProfile.ZipCode" @bind-Value="@_userProfile.ZipCode" Label="Postnummer" Placeholder="8000" Variant="Variant.Text" InputType="InputType.Number" name="zipcode" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField For="() => _userProfile.City" @bind-Value="@_userProfile.City" Label="By" Placeholder="Aarhus C" Variant="Variant.Text" InputType="InputType.Text" name="city" />
            </MudItem>
            <MudItem xs="12" sm="4">
              <MudDatePicker AdornmentColor="Color.Primary"
                             Color="Color.Primary"
                             Rounded
                             Placeholder="@DateTime.Now.ToString("d")"
                             For="() => _userProfile.DateOfBirth"
                             OpenTo="OpenTo.Year"
                             PickerVariant="PickerVariant.Dialog"
                             @bind-Date="@_userProfile.DateOfBirth"
                             Label="Fødselsdato"
                             name="dob" />
            </MudItem>
            <MudItem xs="12">
              <MudSelectExtended ItemCollection="_lookingFor.Select(e=>e.Name).ToList()"
                                   T="string"
                                   Label="Interesseret i"
                                   MultiSelection="true"
                                   SelectedValues="_userProfile.LookingFor.Select(e => e.Name)"
                                   ValuePresenter="ValuePresenter.Chip"
                                   SelectedValuesChanged="SelectedLookingForChanged">
                </MudSelectExtended>
            </MudItem>
            <MudItem xs="12">
              <MudTextFieldExtended
                For="() => _userProfile.Description"
                AutoSize
                Lines="3"
                Immediate
                @bind-Value="@_userProfile.Description"
                Placeholder="Du kan eksempelvis fortælle om dine interesser, uddanelse, familie, børnesyn, værdier og den slags."
                Label="Beskrivelse"
                Variant="Variant.Text"
                InputType="InputType.Text" />
            </MudItem>
        </MudGrid>

    </MudPaper>

    
      <MudText Class="mt-10 mb-5" Typo="Typo.h5"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.ChildCare" />Børn</MudText>


    <EditChildProfileTabs @bind-Parent="_userProfile"></EditChildProfileTabs>

    <MudButton Size="Size.Large"
               StartIcon="@Icons.Material.Filled.Save"
               Class="my-6"
               ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               FullWidth
               Color="Color.Primary">
        Gem
    </MudButton>

</EditForm>

@code {
    private UserProfile? _userProfile;
    private IEnumerable<LookingFor> _lookingFor = Enumerable.Empty<LookingFor>();

    private readonly Action<SnackbarOptions> _snackbarOptions = options =>
    {
        options.CloseAfterNavigation = true;
        options.VisibleStateDuration = 3000;
        options.ShowTransitionDuration = 250;
    };


    protected override async Task OnInitializedAsync()
    {
        var userProfile = await HttpClient.GetFromJsonAsync<UserProfile>("api/profiles");
        if (userProfile is null)
        {

            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }

        await GetLookingFor();

        _userProfile = userProfile;
    }

    private async Task GetLookingFor()
    {
        var result = await HttpClient.GetFromJsonAsync<List<LookingFor>>("api/looking-for");
        if (result is null)
        {
            Snackbar.Add("Det lykkedes ikke at hente dine informationer. Vent et øjeblik og genindlæs så siden.",
              Severity.Warning, _snackbarOptions);
            return;
        }
        _lookingFor = result;
    }

    private async Task UpdateUserProfile()
    {
        var response = await HttpClient.PutAsJsonAsync("api/profiles", _userProfile);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Dine oplysninger er blevet gemt.", Severity.Success, _snackbarOptions);
            return;
        }
        Snackbar.Add("Det lykkedes ikke at opdatere dine informationer. Vent et øjeblik før du prøver igen.", Severity.Warning, _snackbarOptions);
    }

    private void SelectedLookingForChanged(IEnumerable<string> lookingFor)
    {
        _userProfile!.LookingFor = _lookingFor.Where(e => lookingFor.Contains(e.Name)).ToList();
    }
}
