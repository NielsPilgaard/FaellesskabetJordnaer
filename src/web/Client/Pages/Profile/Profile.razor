@page "/{userName}"

@using System.Net
@inject ISnackbar Snackbar
@inject IProfileApiClient ProfileApiClient

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    @if (_profile is null)
    {
        return;
    }
    <MudPaper Elevation="3" Class="pa-4">
        <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@_profile.ProfilePictureUrl" Alt="@($"Billede af {_profile.FirstName}")" />
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudText>First Name: @_profile.FirstName</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText>Last Name: @_profile.LastName</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText>Zip Code: @_profile.ZipCode</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText>City: @_profile.City</MudText>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText>Date of Birth: @_profile.DateOfBirth?.ToString("dd/MM/yyyy")</MudText>
            </MudItem>
        </MudGrid>

        <MudText Class="pt-6">Looking For:</MudText>
        <MudChipSet>
            @foreach (var lookingFor in _profile.LookingFor)
            {
                <MudChip>@lookingFor.Name</MudChip>
            }
        </MudChipSet>

        <MudText Class="pt-6">Description:</MudText>
        <MudText>@_profile.Description</MudText>

    </MudPaper>
</MudLoading>

@code {
    private ProfileDto? _profile;
    private bool _isLoading = true;

    [Parameter]
    public required string UserName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ProfileApiClient.GetUserProfile(UserName);
        if (response.IsSuccessStatusCode)
        {
            _profile = response.Content;
        }
        else if (response.StatusCode is HttpStatusCode.TooManyRequests)
        {
            Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
        }
        else
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
        }
        _isLoading = false;
    }
}
