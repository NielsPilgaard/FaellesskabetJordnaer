@page "/{userName}"

@inject HttpClient HttpClient

@if (_profile is null)
{
    <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true" StrokeWidth="2" />
    return;
}

<MudPaper Elevation="3" Class="pa-4">
    <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@_profile.ProfilePictureUrl" Alt="@($"Billede af {_profile.FirstName}")" />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudText>First Name: @_profile.FirstName</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText>Last Name: @_profile.LastName</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText>Zip Code: @_profile.ZipCode</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText>City: @_profile.City</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudText>Date of Birth: @_profile.DateOfBirth?.ToString("dd/MM/yyyy")</MudText>
        </MudItem>
    </MudGrid>

    <MudText Class="pt-6">Looking For:</MudText>
    <MudChipSet>
        @foreach (var lookingFor in _profile.LookingFor)
        {
            <MudChip>@lookingFor.Name</MudChip>
        }
    </MudChipSet>

    <MudText Class="pt-6">Description:</MudText>
    <MudText>@_profile.Description</MudText>

</MudPaper>

@code {
    private ProfileDto? _profile;
    [Parameter] public required string UserName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var profileDto = await HttpClient.GetFromJsonAsync<ProfileDto>($"api/profiles/{UserName}");
        if (profileDto is null)
        {
            // Handle the error
            return;
        }

        _profile = profileDto;
    }
}
