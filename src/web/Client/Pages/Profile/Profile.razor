@page "/{userName}"

@inject ISnackbar Snackbar
@inject IProfileApiClient ProfileApiClient
@inject IJSRuntime JsRuntime


<MetadataComponent Title="@($"{UserName}'s profil")"
                   Description="@($"Beskrivelse af {UserName}:\n {_profile?.Description}")"
                   Image="@_profile?.ProfilePictureUrl" />

<MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="GoBack" />

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    @if (_profile is null)
    {
        return;
    }
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudImage Fluid Width="200" Style="border-radius: 50%" Src="@_profile.ProfilePictureUrl" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField Adornment="Adornment.Start" AdornmentText="@("@")" T="string" Text="@UserName" ReadOnly />
            </MudItem>

            <MudItem xs="12">
                <MudTextField AdornmentIcon="@Icons.Material.Filled.Place" Adornment="Adornment.Start" T="string" Text="@_profile.DisplayLocation()" ReadOnly />
            </MudItem>
            <MudItem xs="12">
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" T="string" Text="@($"{_profile.FirstName} {_profile.LastName}")" ReadOnly />
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body1">
                    @_profile.Description
                </MudText>
            </MudItem>

            @if (_profile.ChildProfiles.Any())
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.ChildCare" />BÃ¸rn</MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-start">
                    <MudChipSet ReadOnly>
                    @foreach (var child in _profile.ChildProfiles)
                        {
                            <MudBadge Color="Color.Success" Overlap Origin="Origin.TopCenter" Content="child.GetAge()">
                                <MudChip Color="Color.Primary">@child.FirstName @child.LastName</MudChip>
                            </MudBadge>
                        }
                    </MudChipSet>
                </MudItem>
            }

            @if (_profile.LookingFor.Any())
            {
              <MudDivider />
              <MudItem xs="12">
                    <MudText Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Interesseret i</MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-start">
                    <MudChipSet ReadOnly>
                    @foreach (var lookingFor in _profile.LookingFor)
                        {
                            <MudChip Color="Color.Tertiary">@lookingFor</MudChip>
                        }
                    </MudChipSet>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</MudLoading>

@code {
    private ProfileDto? _profile;
    private bool _isLoading = true;

    [Parameter]
    public required string UserName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ProfileApiClient.GetUserProfile(UserName);
        if (response.IsSuccessStatusCode)
        {
            _profile = response.Content;
        }
        else if (response.StatusCode is HttpStatusCode.TooManyRequests)
        {
            Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
        }
        else
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
        }
        _isLoading = false;
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}
