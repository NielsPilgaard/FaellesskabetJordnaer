@using System.Globalization
@using Jordnaer.Shared.Contracts
<MudGrid>
    <MudItem md="4" lg="4" xl="4" xxl="4">
        <MudList Clickable>
            <MudListSubheader>
                <MudText>TODO: Place user search here</MudText>
            </MudListSubheader>
            @foreach (var chat in _chats)
            {
                <MudListItem OnClick="@(() => SelectChat(chat))" Avatar="@ProfileConstants.Default_Profile_Picture">
                    <MudText>@chat.SenderId</MudText>
                </MudListItem>
            }
        </MudList>
    </MudItem>

    <MudItem md="8" lg="8" xl="8" xxl="8">
        @if (_activeChat != null)
        {
            <MudList>
                @foreach (var message in _activeChat.Messages)
                {
                    <MudListItem>
                        @message.TimestampUtc.ToLocalTime().ToString(CultureInfo.CurrentCulture): @message.Content
                    </MudListItem>
                }
            </MudList>
            <MudTextField @bind-Value="_newMessage" FullWidth Immediate Adornment="Adornment.End" TextUpdateSuppression="false" OnKeyDown="SendMessageOnEnter" AdornmentIcon="@Icons.Material.Filled.Send" AdornmentColor="Color.Primary" OnAdornmentClick="SendMessage" />
        }
    </MudItem>
</MudGrid>

@code {
    private List<Chat> _chats = new();
    private Chat? _activeChat;

    protected override void OnInitialized()
    {
        _chats = new List<Chat>
      {
        new()
        {
          SenderId = "User 1",
          Messages = new List<ChatMessage>
          {
            new() {Sender = "User 1", Content = "Hello!", TimestampUtc = DateTime.UtcNow.AddMinutes(-5)},
            new() {Sender = "Me", Content = "Hi, how are you?", TimestampUtc = DateTime.UtcNow.AddMinutes(-2)},
          }
        },
        new()
        {
          SenderId = "User 2",
          Messages = new List<ChatMessage>
          {
            new() {Sender = "User 2", Content = "Hello!", TimestampUtc = DateTime.Now.AddMinutes(-125)},
            new() {Sender = "Me", Content = "Hi, how are you?", TimestampUtc = DateTime.Now.AddMinutes(-95)},
            new() {Sender = "User 2", Content = "I'm doing well, thank you!", TimestampUtc = DateTime.Now.AddMinutes(-75)},
          }
        },
        new()
        {
          SenderId = "User 3",
          Messages = new List<ChatMessage>
          {
            new() {Sender = "User 3", Content = "Hey, what's up?", TimestampUtc = DateTime.Now.AddMinutes(-50)},
            new() {Sender = "Me", Content = "Not much, you?", TimestampUtc = DateTime.Now.AddMinutes(-25)},
            new() {Sender = "User 3", Content = "Just working on a project", TimestampUtc = DateTime.Now.AddMinutes(-15)},
          }
        }
      };
    }

    private void SelectChat(Chat chat) => _activeChat = chat;

    private void BackToList() => _activeChat = null;

    private string _newMessage = string.Empty;

    private void SendMessage()
    {
        if (_activeChat is not null && !string.IsNullOrWhiteSpace(_newMessage))
        {
            _activeChat.Messages.Add(new ChatMessage { Sender = "Me", Content = _newMessage });
            _newMessage = string.Empty;
        }
        else
        {
            //TODO: Add error message
        }
    }

    private void SendMessageOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key is "Enter")
        {
            SendMessage();
        }
    }

}
