@using System.Globalization
@using System.Security.Claims
@using MassTransit
@inject IChatClient ChatClient
@if (User is null)
{
    return;
}

<MudGrid>
    <MudItem md="4" lg="4" xl="4" xxl="4">
        <MudList Clickable>
            <MudListSubheader>
                <UserAutoComplete SelectedUserChanged="StartNewChat" />
            </MudListSubheader>
            @foreach (var chat in _chats)
            {
                <MudListItem OnClick="@(() => SelectChat(chat))" Avatar="@ProfileConstants.Default_Profile_Picture">
                    <MudText>@chat.DisplayName</MudText>
                </MudListItem>
            }
        </MudList>
    </MudItem>

    <MudItem md="8" lg="8" xl="8" xxl="8">
        @if (_activeChat != null)
        {
            <MudList DisablePadding Dense>
            @foreach (var message in _activeChat.Messages.Where(message => !message.IsDeleted))
                {
                    @if (IsMessageFromSelf(message))
                    {
                        <MudListItem Class="message-from-self">
                            <MudChip>@message.Text</MudChip>
                        </MudListItem>
                    }
                    else
                    {
                        <MudListItem Avatar="@message.Sender.ProfilePictureUrl">
                            <MudChip>@message.Text</MudChip>
                        </MudListItem>
                    }
                }
            </MudList>
            <MudTextField @bind-Value="_userText"
                            FullWidth
                            Immediate
                          Adornment="Adornment.End"
                          TextUpdateSuppression="false"
                          OnKeyDown="SendMessageOnEnter"
                          AdornmentIcon="@Icons.Material.Filled.Send"
                          AdornmentColor="Color.Primary"
                          OnAdornmentClick="SendMessage" />
        }
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public UserProfile? User { get; set; }

    private bool _isActiveChatPublished = true;

    protected override void OnParametersSet()
    {
        if (User is null) return;

        _chatUsers = TestData.ChatUserDtos(User);
        _chats = TestData.ChatDtos(User);
    }

    protected override void OnInitialized()
    {
        _currentUser = new UserSlim
            {
                DisplayName = $"{User!.FirstName} {User.LastName}",
                Id = User.Id,
                ProfilePictureUrl = User.ProfilePictureUrl
            };
    }

    private UserSlim _currentUser = null!;

    private List<UserSlim> _chatUsers = new();

    private List<ChatDto> _chats = new();

    private ChatDto? _activeChat;

    private void SelectChat(ChatDto chat) => _activeChat = chat;

    private void BackToList() => _activeChat = null;

    private string _userText = string.Empty;

    private async Task SendMessage()
    {
        if (_activeChat is null || string.IsNullOrWhiteSpace(_userText))
        {
            return;
        }

        var message = new ChatMessageDto
            {
                Id = NewId.NextGuid(),
                SentUtc = DateTime.UtcNow,
                Sender = _currentUser,
                Text = _userText
            };

        if (_isActiveChatPublished is false)
        {
            _activeChat.Messages.Add(message);
            await ChatClient.StartChat(_activeChat);
        }

        await ChatClient.SendMessage(message);
        _activeChat.Messages.Add(message);

        _userText = string.Empty;

    }

    private async Task SendMessageOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private bool IsMessageFromSelf(ChatMessageDto message) => message.Sender.Id == User?.Id;

    private void StartNewChat(UserSlim user)
    {
        // TODO: This should only add a new chat to the list, not actually post it yet
        // Add "isActiveChatPosted" bool to check whether the chat should be posted before sending messages
        var newChat = new ChatDto
            Id = NewId.NextGuid(),
            Recipients = new List<ChatUserDto>
            {
                Id = NewId.NextGuid(),
                Recipients = new List<UserSlim>
            {
                _currentUser,
                new()
                {
                    DisplayName = user.DisplayName,
                    Id = user.Id,
                    ProfilePictureUrl = user.ProfilePictureUrl
                }
            },
                LastMessageSentUtc = DateTime.UtcNow,
                StartedUtc = DateTime.UtcNow
            };

        _chats.Add(newChat);
        _activeChat = newChat;
        _isActiveChatPublished = false;
    }

}
