@using System.Globalization
@using System.Security.Claims
@using MassTransit
@inject IChatClient ChatClient
@inject IProfileCache ProfileCache
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (_currentUser is null)
{
    return;
}

<MudLoading @bind-Loading="_isLoading" Darken Overlap>

    <MudGrid>
        <MudItem md="4" lg="4" xl="4" xxl="4" Style="overflow: auto; height: 100%">
            <MudList Clickable>
                <MudListSubheader>
                    <UserAutoComplete SelectedUserChanged="StartNewChat" />
                </MudListSubheader>
                @foreach (var chat in _chats)
                {
                    @*TODO: The active chat needs to have the active class assigned when selected from dropdown*@
                    <MudListItem OnClick="@(() => SelectChat(chat))" Dense="true" Class="@(chat.Id == _activeChat?.Id ? _activeChatClass : _inactiveChatClass)">

                        <MudAvatar Size="Size.Large" Class="mr-3">
                            <MudImage Src="@GetChatImage(chat)" loading="lazy" Alt="Avatar" />
                        </MudAvatar>
                        <MudText>@chat.GetDisplayName(_currentUser.Id)</MudText>

                    </MudListItem>
                    <MudDivider DividerType="DividerType.FullWidth"/>

                }
            </MudList>
        </MudItem>
        <MudLoading @bind-Loading="_isLoadingMessages" Darken>

            <MudItem md="8" lg="8" xl="8" xxl="8" Style="overflow: auto; height: 100%">
                @if (_activeChat != null)
                {
                    <MudList DisablePadding Dense>
                    @foreach (var message in _activeChat.Messages.Where(message => !message.IsDeleted))
                        {
                            @if (IsMessageFromSelf(message))
                            {
                                <MudListItem Class="message-from-self">
                                    <MudChip Style="max-width:30%">@message.Text</MudChip>
                                </MudListItem>
                            }
                            else
                            {
                                <MudListItem>
                                    <MudChip Style="max-width:30%" Class="pl-0">
                                        <MudAvatar Size="Size.Medium" Class="mr-2">
                                            <MudImage Src="@message.Sender.ProfilePictureUrl" loading="lazy" Alt="Avatar" />
                                        </MudAvatar>
                                        @message.Text
                                    </MudChip>
                                </MudListItem>
                            }
                        }
                    </MudList>
                    <MudTextField @bind-Value="_userText"
                                    FullWidth
                                    Immediate
                                  Adornment="Adornment.End"
                                  TextUpdateSuppression="false"
                                  OnKeyDown="SendMessageOnEnter"
                                  AdornmentIcon="@Icons.Material.Filled.Send"
                                  AdornmentColor="@(string.IsNullOrEmpty(_userText) ? Color.Default : Color.Primary)"
                                  OnAdornmentClick="SendMessage" />
                }
            </MudItem>
        </MudLoading>
    </MudGrid>

</MudLoading>
@code {
    private UserProfile? _currentUser;
    private UserSlim _currentUserSlim = null!;
    private List<ChatDto> _chats = new();
    private ChatDto? _activeChat;

    private string _activeChatClass = "chat-selector active";
    private string _inactiveChatClass = "chat-selector";

    private bool _isActiveChatPublished = true;
    private bool _isLoading = true;
    private bool _isLoadingMessages;

    public string GetChatImage(ChatDto chat)
    {
        if (chat.Recipients.Count > 1)
        {
            return chat.Recipients
                .FirstOrDefault(recipient =>
                    recipient.Id != _currentUser!.Id)?.ProfilePictureUrl
                   ?? ProfileConstants.Default_Profile_Picture;
        }

        return chat.Recipients.FirstOrDefault()?.ProfilePictureUrl ?? ProfileConstants.Default_Profile_Picture;
    }

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await ProfileCache.GetOrCreateProfileAsync();
        if (_currentUser is null)
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
            return;
        }

        _currentUserSlim = _currentUser.ToUserSlim();

        var response = await ChatClient.GetChats(_currentUser.Id);
        switch (response.StatusCode)
        {
            case var _ when response.IsSuccessStatusCode:
                _chats = response.Content!;
                break;

            case HttpStatusCode.TooManyRequests:
                Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                break;

            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                break;
        }

        _isLoading = false;
    }

    private async Task SelectChat(ChatDto chat)
    {
        _isLoadingMessages = true;

        _activeChat = chat;

        if (chat.Messages.Count is 0 && _isActiveChatPublished)
        {
            var response = await ChatClient.GetChatMessages(chat.Id);
            switch (response.StatusCode)
            {
                case var _ when response.IsSuccessStatusCode:
                    chat.Messages.AddRange(response.Content!);
                    break;

                case HttpStatusCode.TooManyRequests:
                    Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                    break;

                default:
                    Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                    break;
            }
        }

        _isLoadingMessages = false;
    }

    private void BackToList() => _activeChat = null;

    private string _userText = string.Empty;

    private async Task SendMessage()
    {
        if (_activeChat is null || string.IsNullOrWhiteSpace(_userText))
        {
            return;
        }

        var message = new ChatMessageDto
            {
                ChatId = _activeChat.Id,
                Id = NewId.NextGuid(),
                SentUtc = DateTime.UtcNow,
                Sender = _currentUserSlim,
                Text = _userText
            };

        _activeChat.Messages.Add(message);
        _userText = string.Empty;

        if (_isActiveChatPublished)
        {
            await ChatClient.SendMessage(message);
        }
        else
        {
            await ChatClient.StartChat(_activeChat);
        }
    }

    private async Task SendMessageOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private bool IsMessageFromSelf(ChatMessageDto message) => message.Sender.Id == _currentUser!.Id;

    private async Task StartNewChat(IEnumerable<UserSlim> users)
    {
        if (users.Count() == 1)
        {
            var userIdsToFind = new[] { users.First().Id, _currentUser!.Id };
            var existingChat = _chats.FirstOrDefault(chat => chat.Recipients.Count == 2 &&
                                                             userIdsToFind.All(id => chat.Recipients.Any(recipient => recipient.Id == id)));
            if (existingChat is not null)
            {
                await SelectChat(existingChat);

                StateHasChanged();

                return;
            }
        }

        // TODO: Check the backend if the chat already exists, return it and mark it as active
        var newChat = new ChatDto
            {
                Id = NewId.NextGuid(),
                Recipients = new List<UserSlim> { _currentUserSlim },
                LastMessageSentUtc = DateTime.UtcNow,
                StartedUtc = DateTime.UtcNow
            };

        foreach (var user in users.Where(u => u.Id != _currentUser!.Id))
        {
            newChat.Recipients.Add(new UserSlim
                {
                    DisplayName = user.DisplayName,
                    Id = user.Id,
                    ProfilePictureUrl = user.ProfilePictureUrl
                });
        }

        _chats.Insert(0, newChat);

        _isActiveChatPublished = false;

        await SelectChat(newChat);

        StateHasChanged();
    }
}
