@using System.Globalization
@using System.Security.Claims
@using MassTransit
@inject IChatClient ChatClient
@inject IProfileCache ProfileCache
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject IScrollManager ScrollManager
@attribute [Authorize]
@if (_currentUser is null)
{
    return;
}

<MudLoading @bind-Loading="_isLoading" Darken Overlap>

    <MudGrid Style="height: 600px">
        <MudItem Class="chat-selector-window" md="3" lg="3" xl="3" xxl="3">
            <MudList Clickable>
                <MudListSubheader>
                    <UserAutoComplete SelectedUserChanged="StartNewChat" />
                </MudListSubheader>
                @foreach (var chat in _chats)
                {
                    @*TODO: The active chat needs to have the active class assigned when selected from dropdown*@
                    <MudListItem OnClick="@(() => SelectChat(chat))" Dense="true" Class="@(chat.Id == _activeChat?.Id ? _activeChatClass : _inactiveChatClass)">

                        <MudAvatar Size="Size.Large" Class="mr-3">
                            <MudImage Src="@chat.GetChatImage(_currentUser.Id)" loading="lazy" Alt="Avatar" />
                        </MudAvatar>
                        <MudText>@chat.GetDisplayName(_currentUser.Id)</MudText>

                    </MudListItem>
                    <MudDivider DividerType="DividerType.FullWidth" />

                }
            </MudList>
        </MudItem>

        <MudItem md="1" lg="1" xl="1" xxl="1">
            <MudDivider Vertical DividerType="DividerType.FullWidth" />
        </MudItem>

        <MudItem Class="chat-message-window" md="8" lg="8" xl="8" xxl="8" @onscroll="HandleScroll">
            @if (_activeChat != null)
            {
                <MudList Class="chat-message-list" DisablePadding Dense>

                @foreach (var message in _activeChat.Messages)
                    {
                        @if (IsMessageFromSelf(message))
                        {
                            <MudListItem Class="message-from-self">
                                <MudChip Text="@message.Text"
                                         Class="chat-chip px-2 py-1" />
                            </MudListItem>
                        }
                        else
                        {
                            <MudListItem>
                                <MudChip Class="pl-0 pb-0 chat-chip">
                                    <MudAvatar Size="Size.Medium" Class="mr-2">
                                        <MudImage Src="@message.Sender.ProfilePictureUrl" loading="lazy" Alt="Avatar" />
                                    </MudAvatar>
                                    @message.Text
                                </MudChip>
                            </MudListItem>
                        }
                    }

                </MudList>
                <MudTextField @bind-Value="_userText"
                                FullWidth
                                Immediate
                                AutoFocus
                              Class="chat-message-input"
                              Adornment="Adornment.End"
                              TextUpdateSuppression="false"
                              OnKeyDown="SendMessageOnEnter"
                              AdornmentIcon="@Icons.Material.Filled.Send"
                              AdornmentColor="@(string.IsNullOrEmpty(_userText) ? Color.Default : Color.Primary)"
                              OnAdornmentClick="SendMessage" />
            }
        </MudItem>
    </MudGrid>

</MudLoading>
@code {
    private UserProfile? _currentUser;
    private UserSlim _currentUserSlim = null!;
    private List<ChatDto> _chats = new();
    private ChatDto? _activeChat;

    private string _activeChatClass = "chat-selector active";
    private string _inactiveChatClass = "chat-selector";
    private string _userText = string.Empty;

    private bool _enableScrollListener = false;
    private bool _isActiveChatPublished = true;
    private bool _isLoading = true;

    private ElementReference _chatContainer;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await ProfileCache.GetOrCreateProfileAsync();
        if (_currentUser is null)
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
            return;
        }

        _currentUserSlim = _currentUser.ToUserSlim();

        var response = await ChatClient.GetChats(_currentUser.Id);
        switch (response.StatusCode)
        {
            case var _ when response.IsSuccessStatusCode:
                _chats = response.Content!;
                break;

            case HttpStatusCode.TooManyRequests:
                Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                break;

            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                break;
        }

        _isLoading = false;
    }

    public async Task LoadMessages()
    {
        if (_activeChat is null)
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
            return;
        }

        var response = await ChatClient.GetChatMessages(_activeChat.Id, _activeChat.Messages.Count);
        switch (response.StatusCode)
        {
            case var _ when response.IsSuccessStatusCode:
                _activeChat.Messages.InsertRange(0, response.Content!);
                break;

            case HttpStatusCode.TooManyRequests:
                Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                break;

            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                break;
        }
    }

    private async Task SelectChat(ChatDto chat)
    {
        _enableScrollListener = false;
        _activeChat = chat;
        if (_activeChat.Messages.Count is 0 && _isActiveChatPublished)
        {
            await LoadMessages();
        }

        await JsRuntime.InvokeVoidAsync("scrollFunctions.scrollToTheBottomOfChat");

        _enableScrollListener = true;
    }

    private void BackToList() => _activeChat = null;

    private async Task SendMessage()
    {
        if (_activeChat is null || string.IsNullOrWhiteSpace(_userText))
        {
            return;
        }

        var message = new ChatMessageDto
            {
                ChatId = _activeChat.Id,
                Id = NewId.NextGuid(),
                SentUtc = DateTime.UtcNow,
                Sender = _currentUserSlim,
                Text = _userText
            };

        _activeChat.Messages.Add(message);
        _userText = string.Empty;

        if (_isActiveChatPublished)
        {
            // TODO: Error handling
            await ChatClient.SendMessage(message);
        }
        else
        {
            // TODO: Error handling
            await ChatClient.StartChat(_activeChat);
        }
    }

    private async Task SendMessageOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private bool IsMessageFromSelf(ChatMessageDto message) => message.Sender.Id == _currentUser!.Id;

    private async Task StartNewChat(IEnumerable<UserSlim> users)
    {
        if (users.Count() == 1)
        {
            var userIdsToFind = new[] { users.First().Id, _currentUser!.Id };
            var existingChat = _chats.FirstOrDefault(chat => chat.Recipients.Count == 2 &&
                                                             userIdsToFind.All(id => chat.Recipients.Any(recipient => recipient.Id == id)));
            if (existingChat is not null)
            {
                await SelectChat(existingChat);

                return;
            }
        }

        var newChat = new ChatDto
            {
                Id = NewId.NextGuid(),
                Recipients = new List<UserSlim> { _currentUserSlim },
                LastMessageSentUtc = DateTime.UtcNow,
                StartedUtc = DateTime.UtcNow
            };

        foreach (var user in users.Where(u => u.Id != _currentUser!.Id))
        {
            newChat.Recipients.Add(new UserSlim
                {
                    DisplayName = user.DisplayName,
                    Id = user.Id,
                    ProfilePictureUrl = user.ProfilePictureUrl
                });
        }

        _chats.Insert(0, newChat);

        _isActiveChatPublished = false;

        await SelectChat(newChat);
    }

    private async Task HandleScroll()
    {
        if (!_enableScrollListener)
        {
            return;
        }

        var isAtTheTop = await JsRuntime.InvokeAsync<bool>("scrollFunctions.isChatContainerAtTheTop");
        if (isAtTheTop)
        {
            await LoadMessages();
        }
    }
}
