@inject IUserSearchClient UserSearchClient
@inject ISnackbar Snackbar

<MudAutocomplete T="UserDto"
                 Label="Søg efter bruger"
                 SearchFuncWithCancel="@SearchForUsers"
                      SelectValueOnTab
                      ShowProgressIndicator
                 OpenIcon="@string.Empty"
                 DebounceInterval="1000"
                      Clearable
AdornmentIcon="@Icons.Material.Filled.Search"
ValueChanged="UserSelected"
                 MinCharacters="2">
    <ItemTemplate Context="user">
        @user.FirstName @user.LastName
    </ItemTemplate>

    <MoreItemsTemplate>
        <MudText Align="Align.Center" Class="px-4 py-1">
            Kun de første 10 brugere vises
        </MudText>
    </MoreItemsTemplate>

    <NoItemsTemplate>
        <MudText Align="Align.Center" Class="px-4 py-1">
            Ingen brugere fundet
        </MudText>
    </NoItemsTemplate>
</MudAutocomplete>


@code {

    [Parameter]
    public EventCallback<UserDto> SelectedUserChanged { get; set; }

    private async Task<IEnumerable<UserDto>> SearchForUsers(string searchString, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return Array.Empty<UserDto>();
        }

        var response = await UserSearchClient.GetUsersWithAutoComplete(searchString, cancellationToken);
        switch (response.StatusCode)
        {
            case var _ when response.IsSuccessStatusCode:
                return response.Content!.Users;

            case HttpStatusCode.TooManyRequests:
                Snackbar.Add(ErrorMessages.High_Load, Severity.Info);
                return Enumerable.Empty<UserDto>();

            default:
                Snackbar.Add(ErrorMessages.Something_Went_Wrong_Refresh, Severity.Warning);
                return Enumerable.Empty<UserDto>();
        }
    }

    private async Task UserSelected(UserDto user) => await SelectedUserChanged.InvokeAsync(user);

}
