@inject IChatClient ChatClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudButton
    Disabled="Disabled"
    EndIcon="@(_isMessageSent ? Icons.Material.Filled.Check : Icons.Material.Filled.Message)"
    OnClick="OpenOrStartChat"
    Color="@(_isMessageSent ? Color.Success : Color.Primary)"
    Size="Size.Large"
    Class="mb-5">
    @(_isMessageSent ? "Besked sendt" : "Send Besked")
</MudButton>

    @code
    {
    [Parameter]
    public required List<UserSlim> Recipients { get; set; }

    [Parameter]
    public required string InitiatorId { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private bool _isMessageSent = false;

    private async Task OpenOrStartChat()
    {
        var getChatResponse = await ChatClient.GetChat(Recipients.Select(recipient => recipient.Id).ToArray());
        if (getChatResponse is { IsSuccessStatusCode: true, Content: { } chatId })
        {
            NavigationManager.NavigateTo($"/chat/{chatId}");
            return;
        }

        if (getChatResponse.StatusCode is HttpStatusCode.NotFound)
        {
            var parameters = new DialogParameters<SendMessageDialog>
            {
                { dialog => dialog.InitiatorId, InitiatorId },
                { dialog => dialog.Recipients, Recipients }
            };
            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                DisableBackdropClick = false,
                NoHeader = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = false
            };

            var dialogReference = await DialogService.ShowAsync<SendMessageDialog>("Send besked", parameters, options);

            var dialogResult = await dialogReference.Result;
            if (!dialogResult.Canceled && dialogResult.Data is true)
            {
                _isMessageSent = true;
            }
        }
    }
}
