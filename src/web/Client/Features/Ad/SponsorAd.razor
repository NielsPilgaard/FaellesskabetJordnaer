@using MudBlazor.Services
@inject IBreakpointService BreakpointService
@implements IAsyncDisposable

<MudContainer MaxWidth="MaxWidth.Medium">
    <div class="image-ad-wrapper">
        <div class="image-with-label">
            @if (_isMobile)
            {
                <MudImage Src="@MobileImagePath" Fluid="Fluid" Alt="@ImageAlt" Class="@Class" loading="lazy" />
            }
            else
            {
                <MudImage Src="@DesktopImagePath" Fluid="Fluid" Alt="@ImageAlt" Class="@Class" loading="lazy" />
            }
            <div class="image-ad-label">Sponsor reklame</div>
        </div>
    </div>
</MudContainer>

@code
{
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public required string MobileImagePath { get; set; }

    [Parameter]
    public required string DesktopImagePath { get; set; }

    [Parameter]
    public required string ImageAlt { get; set; }

    [Parameter]
    public bool Fluid { get; set; } = true;

    private bool _isMobile = true;
    private Guid _subscriptionId;

    protected override async Task OnInitializedAsync()
    {
        _isMobile = await BreakpointService.IsMediaSize(Breakpoint.SmAndDown);

        var breakpointServiceSubscribeResult = await BreakpointService.SubscribeAsync(
          breakpoint =>
          {
              _isMobile = breakpoint <= Breakpoint.Sm;
              StateHasChanged();
          });

        _subscriptionId = breakpointServiceSubscribeResult.SubscriptionId;
    }

    public async ValueTask DisposeAsync()
    {
        await BreakpointService.UnsubscribeAsync(_subscriptionId);
    }
}
