@using MudBlazor.Services
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@if (SearchResult.TotalCount > 0)
{
    <MudGrid Justify="Justify.Center">

        @foreach (var user in SearchResult.Users)
        {
            <MudItem xs="12" sm="8" md="6" lg="4" xl="4">
                <MudNavLink  Class="card-link" OnClick="()=>SaveScrollPosition(user)">
                    <MudCard Class="pa-3 my-3" Elevation="3">
                        <MudCardContent Class="d-flex flex-column align-center">
                            <MudImage Fluid Width="200" Style="border-radius: 50%" Src="@user.ProfilePictureUrl" loading="lazy" />
                            <MudTextField Label="Brugernavn" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail" ReadOnly T="string" Text="@user.UserName" />
                            <MudTextField Label="Område" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Place" ReadOnly T="string" Text="@user.DisplayLocation()" />
                            <MudTextField Label="Navn" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AccountCircle" ReadOnly T="string" Text="@($"{user.FirstName} {user.LastName}")" />

                            @if (user.Children.Any())
                            {
                                <MudText Class="my-4" Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.ChildCare" />Børn</MudText>
                                <MudChipSet ReadOnly Class="d-flex flex-wrap justify-start flex-grow-1 gap-3">
                                    @foreach (var child in user.Children.OrderBy(c => c.DateOfBirth))
                                    {
                                        <MudBadge Color="Color.Success" Overlap Origin="Origin.TopCenter" Content="GetAgeString(child)">
                                            <MudChip Color="Color.Primary">@child.FirstName @child.LastName</MudChip>
                                        </MudBadge>
                                    }
                                </MudChipSet>
                            }

                            @if (user.LookingFor.Any())
                            {
                                <MudDivider Class="my-4"/>

                                <MudText Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Interesseret i</MudText>
                                <MudChipSet ReadOnly Class="d-flex flex-wrap justify-center flex-grow-1">
                                    @foreach (var lookingFor in user.LookingFor)
                                    {
                                        <MudChip Color="Color.Tertiary">@lookingFor</MudChip>
                                    }
                                </MudChipSet>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudNavLink>
            </MudItem>
        }
    </MudGrid>
    <MudPagination Class="mt-5 d-flex justify-center" BoundaryCount="0" MiddleCount="3" UserAttributes="@(new Dictionary<string, object> {["title"] = $"Viser {Filter.PageSize} ud af {SearchResult.TotalCount} resultater."})" SelectedChanged="@SelectedPageChanged" Variant="Variant.Filled" Count="@(SearchResult.TotalCount / Filter.PageSize)" />

}
else
{
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper>
                <MudAlert Severity="Severity.Info">
                    <MudText Align="Align.Center" Typo="Typo.h6">Ingen brugere matchede søgningen.</MudText>
                </MudAlert>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
@code {

    private string GetAgeString(ChildDto child)
    {
        var age = child.DateOfBirth.GetAge();
        return age is not null ? $"{age} år" : "?";
    }

    private async Task SaveScrollPosition(UserDto user)
    {
        await JsRuntime.InvokeVoidAsync("scrollFunctions.saveScrollPosition");
        Navigation.NavigateTo($"/{user.UserName}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("scrollFunctions.loadScrollPosition");
        }
    }

    [Parameter]
    public required UserSearchFilter Filter { get; set; }

    [Parameter]
    public required UserSearchResult SearchResult { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPageChanged { get; set; }

}
