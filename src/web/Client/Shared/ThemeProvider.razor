@using Blazored.LocalStorage
@using MudBlazor.Utilities
@using Palette = Jordnaer.Client.Features.Theme.Palette
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@IsDarkMode" Theme="CustomTheme" />

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }
    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    private const string Key = "dark-mode";

    private static MudThemeProvider _mudThemeProvider = new();

    private static readonly MudTheme CustomTheme = new()
        {
            Typography = new Typography
            {
                Body1 = new Body1
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" }
                },
                Body2 = new Body2
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" }
                },
                Default = new Default
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" }
                }
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();

            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);

            var savedMode = await LocalStorage.GetItemAsync<bool?>(Key);
            if (savedMode.HasValue)
            {
                IsDarkMode = savedMode.Value;
            }

            await IsDarkModeChanged.InvokeAsync(IsDarkMode);

            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        IsDarkMode = isDarkMode;

        await LocalStorage.SetItemAsync(Key, IsDarkMode);

        await IsDarkModeChanged.InvokeAsync(IsDarkMode);

        StateHasChanged();
    }
}
