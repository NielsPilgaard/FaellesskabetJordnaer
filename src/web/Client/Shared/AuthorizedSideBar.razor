@inject IChatClient ChatClient
@inject NavigationManager Navigation
@implements IDisposable

<MudDivider />
<Feature Name="@FeatureFlags.Contacts">
    <MudNavLink Match="NavLinkMatch.All" Href="/contacts" Icon="@Icons.Material.Filled.Contacts">Mine Kontakter</MudNavLink>
</Feature>

<MudNavLink Match="NavLinkMatch.Prefix"
            Href="/chat"
            Icon="@Icons.Material.Filled.Chat">
    @if (_unreadMessageCount > 0)
    {
        <MudBadge Origin="Origin.CenterRight" BadgeClass="ml-2" Color="Color.Error" Content="@_unreadMessageCount">
            <MudText>Chat</MudText>
        </MudBadge>
    }
    else
    {
        <MudText>Chat</MudText>
    }
</MudNavLink>
<Feature Name="@FeatureFlags.Events">
    <MudNavLink Match="NavLinkMatch.Prefix" Href="/events" Icon="@Icons.Material.Filled.EventAvailable">Mine Begivenheder</MudNavLink>
</Feature>
<MudDivider />
@code {
    private int _unreadMessageCount = 0;
    private IDisposable? _locationChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        // TODO: Create a Singleton timer that runs every 5 minutes, polling for new unread messages
        _locationChangedHandler = Navigation.RegisterLocationChangingHandler(async context =>
        {
            // Only trigger when navigating to specific chats, not just the overall chat page
            if (_unreadMessageCount > 0 && context.TargetLocation.StartsWith("/chat") && context.TargetLocation != "/chat")
            {
                await GetUnreadMessageCount();
                StateHasChanged();
            }
        });

        await GetUnreadMessageCount();
    }

    private async Task GetUnreadMessageCount()
    {
        var response = await ChatClient.GetUnreadMessageCount();
        if (response.IsSuccessStatusCode)
        {
            _unreadMessageCount = response.Content;
        }
    }

    public void Dispose() => _locationChangedHandler?.Dispose();

}
