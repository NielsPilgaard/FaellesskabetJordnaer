@inject ICategoryCache CategoryCache

<MudSelectExtended ItemCollection="_allCategories"
                   T="string"
                   Label="Kategorier"
                   Placeholder="VÃ¦lg"
                   MultiSelection="true"
                   ValuePresenter="ValuePresenter.Chip"
                   AnchorOrigin="Origin.BottomCenter"
                   SelectedValues="Categories"
                   SelectedValuesChanged="SelectedCategoriesChanged">
</MudSelectExtended>
@code
{
    private List<string> _allCategories = [];

    [Parameter]
    public string[]? Categories { get; set; }

    [Parameter]
    public EventCallback<string[]?> CategoriesChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var cachedCategories = await CategoryCache.GetOrCreateCategoriesAsync();
        _allCategories = cachedCategories.Select(x => x.Name).ToList();
    }

    private async Task SelectedCategoriesChanged(IEnumerable<string?>? categories)
    {
        Categories = (categories is null 
		    ? [] 
		    : categories.Where(x => x != null).ToArray())!;

	    await CategoriesChanged.InvokeAsync(Categories);
    }
}
