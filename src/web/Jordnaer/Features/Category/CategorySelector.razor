@inject ICategoryCache CategoryCache

<MudChipSet T="string" 
            Style="display: flex; flex-wrap: wrap; justify-content: center;"
            SelectionMode="SelectionMode.MultiSelection"
            SelectedValues="Categories"
            CheckMark
            Color="Color.Tertiary"
            SelectedColor="Color.Success"
            SelectedValuesChanged="SelectedCategoriesChanged"
            Variant="Variant.Outlined">
	@foreach (var category in _allCategories)
	{
		<MudChip Text="@category" Value="@category" />
	}
</MudChipSet>
@code
{
    private List<string> _allCategories = [];

    [Parameter]
    public string[]? Categories { get; set; }

    [Parameter]
    public EventCallback<string[]?> CategoriesChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var cachedCategories = await CategoryCache.GetOrCreateCategoriesAsync();
        _allCategories = cachedCategories.Select(x => x.Name).ToList();
    }

    private async Task SelectedCategoriesChanged(IEnumerable<string?>? categories)
    {
        Categories = (categories is null 
		    ? [] 
		    : categories.Where(x => x != null).ToArray())!;

	    await CategoriesChanged.InvokeAsync(Categories);
    }
}
