@inject ICategoryCache CategoryCache

<MudSelectExtended ItemCollection="_categories"
                   T="string"
                   Label="Kategorier"
                   Placeholder="VÃ¦lg"
                   MultiSelection="true"
                   ValuePresenter="ValuePresenter.Chip"
                   AnchorOrigin="Origin.BottomCenter"
                   SelectedValues="Categories"
                   SelectedValuesChanged="SelectedCategoriesChanged">
</MudSelectExtended>
@code
{
    private List<string> _categories = [];

    [SupplyParameterFromQuery(Name = "categories")]
    public string[]? CategoriesFromQueryString { get; set; }
    
    [Parameter]
    public string[]? Categories { get; set; }

    [Parameter]
    public EventCallback<string[]?> CategoriesChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var cachedCategories = await CategoryCache.GetOrCreateCategoriesAsync();
        _categories = cachedCategories.Select(x => x.Name).ToList();

        if (CategoriesFromQueryString is {Length: > 0})
        {
            await SelectedCategoriesChanged(CategoriesFromQueryString);
        }
    }

    private async Task SelectedCategoriesChanged(IEnumerable<string?>? categories)
    {
        Categories = categories?.ToArray()!;
        await CategoriesChanged.InvokeAsync(Categories);
    }
}
