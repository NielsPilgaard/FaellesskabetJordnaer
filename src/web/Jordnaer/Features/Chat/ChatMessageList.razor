@inject CurrentUser CurrentUser

@inject IChatService ChatService
@inject IChatMessageCache ChatMessageCache
@inject IProfileCache ProfileCache
@inject IJSRuntime JsRuntime
@inject ChatSignalRClient ChatSignalRClient
@inject NavigationManager Navigation

@attribute [Authorize]

<MudItem Class="@MudItemClass" Style="@MudItemStyle" xs="12" sm="12" md="8" lg="8" xl="8" xxl="8">

    @if (ActiveChat is null)
    {
	    <MudStack Row Style="margin-left: -24px;">
		    <MudIcon Icon="@Icons.Material.Filled.ArrowCircleLeft" Size="Size.Large" Color="Color.Info" />
		    <MudText Typo="Typo.h5">Vælg én at skrive med</MudText>
	    </MudStack>
        return;
    }

    @if (IsMobile)
    {
        <MudAppBar Dense
                   ToolBarClass="justify-space-between h-100"
                   Color="Color.Primary"
                   Elevation="5">
            <MudFab StartIcon="@Icons.Material.Filled.ArrowBack"
                    OnClick="BackToList"
                    Color="Color.Info"
                    Size="Size.Small" />
            <MudText Typo="Typo.h5">@ActiveChat.GetDisplayName(CurrentUser.Id!)</MudText>
        </MudAppBar>
    }
    
    @*The elements below cannot be readonly/disabled, as it disabled the tooltips *@
    <MudList Class="chat-message-list" Padding="false" Dense T="RenderFragment">
        <MudSpacer />
        <MudVirtualize Items="ActiveChat?.Messages" Context="message" OverscanCount="8" ItemSize="80">

            @if (IsMessageFromSelf(message))
            {
                <MudListItem Class="message-from-self" T="MudTooltip">
                    <MudTooltip Placement="Placement.Top" ShowOnClick ShowOnHover="false" ShowOnFocus="false" Arrow Text="@message.SentUtc.DisplayExactTime()">
                        <MudTooltip ShowOnHover Arrow Text="@message.SentUtc.DisplayTimePassed()">
                            <MudChip Class="chat-chip" Size="Size.Large" T="MudText">
                                <MudText Typo="Typo.h6">@message.Text</MudText>
                            </MudChip>
                        </MudTooltip>
                    </MudTooltip>
                </MudListItem>
            }
            else
            {
                <MudListItem T="MudTooltip">
                    <MudTooltip Placement="Placement.Top" ShowOnClick ShowOnHover="false" ShowOnFocus="false" Arrow Text="@message.SentUtc.DisplayExactTime()">
                        <MudTooltip ShowOnHover Arrow Text="@message.SentUtc.DisplayTimePassed()">
                            <MudChip Class="chat-chip" Size="Size.Large" T="MudLink">
                                <AvatarContent>
                                    @if (!NextMessageIsFromSameSender(message))
                                    {
                                        <MudLink Href="@GetRecipientsUserName(message)">
                                            <MudAvatar>
                                                <MudImage Src="@GetRecipientsProfilePictureUrl(message)" loading="lazy" Alt="Avatar" />
                                            </MudAvatar>
                                        </MudLink>
                                    }
                                </AvatarContent>
                                <ChildContent>
                                    <MudText Typo="Typo.h6">@message.Text</MudText>
                                </ChildContent>
                            </MudChip>
                        </MudTooltip>
                    </MudTooltip>
                </MudListItem>
            }
        </MudVirtualize>

        @if (LastMessageWasSentSuccessfullyByCurrentUser)
        {
            <div title="Din besked er blevet sendt" class="message-sent-successfully-container">
                <MudIcon Icon="@Icons.Material.Outlined.CheckCircleOutline"
                         Class="message-sent-successfully" />
            </div>
        }

        <MudTextField id="chat-message-input"
                      @ref="_messageInput"
                      T="string"
                      FullWidth
                      Immediate
                      Clearable
                      AutoFocus
                      Adornment="Adornment.End"
                      OnKeyDown="SendMessageOnEnter"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      AdornmentColor="@(string.IsNullOrWhiteSpace(_messageInput.Value) ? Color.Default : Color.Primary)"
                      OnAdornmentClick="SendMessage"
                      Class="mt-3 p-1"
                      Lines="2"
                      IconSize="Size.Large"
                      Style="@($"background: {JordnaerTheme.CustomTheme.PaletteLight.BackgroundGray}")" />
    </MudList>
</MudItem>

@code
{
    [Parameter, EditorRequired]
    public required ChatDto? ActiveChat { get; set; }

    [Parameter]
    public EventCallback<ChatDto?> ActiveChatChanged { get; set; }

    [Parameter, EditorRequired]
    public bool IsMobile { get; set; }

    [Parameter, EditorRequired]
    public bool LastMessageWasSentSuccessfullyByCurrentUser { get; set; }

    private MudTextField<string> _messageInput = new();
    private bool _isActiveChatPublished => ActiveChat?.Messages.Count is not 0;

    private bool IsMessageFromSelf(ChatMessageDto message) => message.SenderId == CurrentUser.Id;

    private string MudItemClass => ActiveChat is null
        ? "chat-message-window d-flex align-center justify-center"
        : "chat-message-window";

    private string MudItemStyle => ActiveChat is null
        ? "padding: 0"
        : "";

    private string GetRecipientsProfilePictureUrl(ChatMessageDto message)
    => ActiveChat?
        .Recipients
        .FirstOrDefault(recipient => recipient.Id == message.SenderId)?.ProfilePictureUrl
       ?? ProfileConstants.Default_Profile_Picture;

    private string? GetRecipientsUserName(ChatMessageDto message)
        => ActiveChat?
            .Recipients
            .FirstOrDefault(recipient => recipient.Id == message.SenderId)?.UserName;

    private bool NextMessageIsFromSameSender(ChatMessageDto message)
    {
        if (ActiveChat is null)
        {
            return false;
        }
        var messageIndex = ActiveChat.Messages.IndexOf(message);
        if (messageIndex is -1)
        {
            return false;
        }
        if (ActiveChat.Messages.Count <= messageIndex + 1)
        {
            return false;
        }

        return ActiveChat.Messages[messageIndex + 1].SenderId == message.SenderId;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
	    await JsRuntime.ScrollToBottomOfElement(".chat-message-window");
    }

    private void MarkMessageIfSuccessfullySentByCurrentUser()
    {
        if (ActiveChat is null)
        {
            return;
        }

        var lastMessage = ActiveChat.Messages.LastOrDefault();
        if (lastMessage is null)
        {
            LastMessageWasSentSuccessfullyByCurrentUser = false;
            return;
        }

        LastMessageWasSentSuccessfullyByCurrentUser = lastMessage.SenderId == CurrentUser.Id;
    }

    private async Task BackToList()
    {
        ActiveChat = null;
        await ActiveChatChanged.InvokeAsync(ActiveChat);
        await JsRuntime.GoBackAsync();
    }

    private async Task SendMessage()
    {
        if (ActiveChat is null || string.IsNullOrWhiteSpace(_messageInput.Value))
        {
            return;
        }

        var message = new ChatMessageDto
            {
                ChatId = ActiveChat.Id,
                Id = NewId.NextGuid(),
                SentUtc = DateTime.UtcNow,
                SenderId = CurrentUser.Id!,
                Text = _messageInput.Value
            };

        await _messageInput.BlurAsync();
        await _messageInput.Clear();

        ActiveChat.Messages.Add(message);

        if (_isActiveChatPublished)
        {
            await ChatService.SendMessageAsync(message);
        }
        else
        {
            await ChatService.StartChatAsync(ActiveChat.ToStartChatCommand(CurrentUser.Id!));
        }

        await _messageInput.FocusAsync();
        await JsRuntime.ScrollToBottomOfElement(".chat-message-window");
    }

    // TODO: Add MudScrollToTop that shows when user is scrolled up in the chat window

    private async Task SendMessageOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }
}
