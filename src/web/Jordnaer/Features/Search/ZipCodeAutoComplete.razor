@inject IDataForsyningenClient DataForsyningenClient
@inject IJSRuntime JSRuntime
@inject ILogger<ZipCodeAutoComplete> Logger

<MudAutocomplete T="string"
                 ValueChanged="LocationValueChanged"
                 Placeholder="Søg i nærheden af postnummer"
                 Value="Location"
                 Label="Område"
                 SearchFunc="@SearchForZipCodes"
                 SelectValueOnTab
                 ShowProgressIndicator
                 OpenIcon="@string.Empty"
                 AdornmentIcon="@Icons.Material.Filled.Place"
                 Adornment="Adornment.Start"
                 DebounceInterval="250"
                 Clearable
                 For="@For"
                 MinCharacters="2" />

@code
{
    [Parameter, EditorRequired]
    public required string Location { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<string> LocationChanged { get; set; }

    [Parameter, EditorRequired]
    public required Expression<Func<string?>> For { get; set; }

    [Parameter, EditorRequired]
    public bool RecentlyClearedForm { get; set; } = false;

    private static readonly NumberFormatInfo FloatNumberFormat = new() { CurrencyDecimalSeparator = "." };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || RecentlyClearedForm)
        {
            return;
        }

        var userCoordinates = await JSRuntime.GetGeolocation();
        if (userCoordinates is not null)
        {
            var (latitude, longitude) = userCoordinates.Value;

            var response = await DataForsyningenClient.GetZipCodeFromCoordinates(
                longitude.ToString(FloatNumberFormat),
                latitude.ToString(FloatNumberFormat));

            if (response.IsSuccessStatusCode)
            {
                var location = $"{response.Content.Nr} {response.Content.Navn}";
                await LocationValueChanged(location);
            }
            else
            {
                Logger.LogError(response.Error,
                    "Failed to get zip code from user coordinates. " +
                    "Uri: {Uri} StatusCode: {StatusCode}",
                    response.RequestMessage?.RequestUri,
                    response.StatusCode);
            }
        }
    }

    public async Task<IEnumerable<string>> SearchForZipCodes(string value, CancellationToken cancellationToken)
    {
        var searchResponse = await DataForsyningenClient.GetZipCodesWithAutoComplete(value, cancellationToken);

        return searchResponse.IsSuccessStatusCode
          ? searchResponse.Content!.Select(response => response.ToString())
          : [];
    }

    private async Task LocationValueChanged(string value)
    {
        Location = value;
        await LocationChanged.InvokeAsync(Location);
    }
}
