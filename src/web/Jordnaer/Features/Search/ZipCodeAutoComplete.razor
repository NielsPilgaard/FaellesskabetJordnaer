@inject IDataForsyningenClient DataForsyningenClient
@inject IJSRuntime JSRuntime
@inject ILogger<ZipCodeAutoComplete> Logger
@inject ISnackbar Snackbar
@inject IProfileCache ProfileCache

<MudAutocomplete T="string"
                 ValueChanged="LocationValueChanged"
                 Placeholder="Søg i nærheden af postnummer"
                 Value="Location"
                 Label="Område"
                 SearchFunc="@SearchForZipCodes"
                 SelectValueOnTab
                 ShowProgressIndicator
                 OpenIcon="@string.Empty"
                 AdornmentIcon="@Icons.Material.Filled.Place"
                 Adornment="Adornment.Start"
                 DebounceInterval="250"
                 Clearable
                 For="@For"
                 MinCharacters="2" />

@code
{
    [Parameter, EditorRequired]
    public required string Location { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<string> LocationChanged { get; set; }

    [Parameter, EditorRequired]
    public required Expression<Func<string?>> For { get; set; }

    [Parameter, EditorRequired]
    public bool DisableSmartCompletion { get; set; } = false;

    private static readonly NumberFormatInfo FloatNumberFormat = new() { CurrencyDecimalSeparator = "." };
    private bool _locationSetOnInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (DisableSmartCompletion)
        {
            return;
        }

        await SetLocationToUsersZipCode();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
	    if (!firstRender || DisableSmartCompletion || _locationSetOnInitialized)
	    {
		    return;
	    }

	    await SetLocationFromUsersCoordinates();
    }

    private async Task SetLocationFromUsersCoordinates()
    {
        var userCoordinates = await JSRuntime.GetGeolocation();
        if (userCoordinates is null)
        {
            return;
        }

        var (latitude, longitude) = userCoordinates.Value;

        var response = await DataForsyningenClient.GetZipCodeFromCoordinates(
            longitude.ToString(FloatNumberFormat),
            latitude.ToString(FloatNumberFormat));

        if (response.IsSuccessStatusCode)
        {
            var location = $"{response.Content.Nr} {response.Content.Navn}";
            await LocationValueChanged(location);
        }
        else
        {
            Snackbar.Add("Det lykkedes ikke at finde dit postnummer ud fra din nuværende lokation.", Severity.Info);
            Logger.LogError(response.Error,
                "Failed to get zip code from user coordinates. " +
                "Uri: {Uri} StatusCode: {StatusCode}",
                response.RequestMessage?.RequestUri,
                response.StatusCode);
        }
    }

    private async Task SetLocationToUsersZipCode()
    {
        var profile = await ProfileCache.GetProfileAsync();
        if (profile?.ZipCode is null)
        {
            return;
        }

        var location = $"{profile.ZipCode} {profile.City}";
        await LocationValueChanged(location);

        _locationSetOnInitialized = true;
    }

    public async Task<IEnumerable<string>> SearchForZipCodes(string value, CancellationToken cancellationToken)
    {
        var searchResponse = await DataForsyningenClient.GetZipCodesWithAutoComplete(value, cancellationToken);

        return searchResponse.IsSuccessStatusCode
          ? searchResponse.Content!.Select(response => response.ToString())
          : [];
    }

    private async Task LocationValueChanged(string value)
    {
        Location = value;
        await LocationChanged.InvokeAsync(Location);
    }
}
