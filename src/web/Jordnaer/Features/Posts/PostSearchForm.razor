@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<MudContainer MaxWidth="MaxWidth.Small">

    <MudPaper Elevation="3" Class="pa-10 mt-5">
        <p class="font-open-sans-light" style="color: @JordnaerPalette.RedHeader; font-size: 20px;">
            Find Opslag
        </p>

        <MudDivider Class="mb-5 mt-1" />

        <EditForm OnValidSubmit="@OnValidSubmit" Model="Filter">
            <DataAnnotationsValidator />

            <MudGrid Justify="Justify.SpaceAround" Spacing="6">

                <MudItem xs="12">
                    <MudTextField @bind-Value="Filter.Contents" Placeholder="Søg efter indlæg" Label="Søg på indlæg" Clearable />
                </MudItem>

                <MudItem xs="12" sm="11" md="10" lg="9" xl="8" Class="mt-8">
                    <MudButtonGroup OverrideStyles="false" Style="width: 100%;">
                        <MudButton FullWidth
                                   Variant="Variant.Filled"
                                   Color="Color.Success"
                                   ButtonType="ButtonType.Submit">
                            <MudIcon Icon="@Icons.Material.Filled.Search" />
                        </MudButton>
                        <MudButton OnClick="ClearFilter"
                                   Color="Color.Transparent"
                                   Variant="Variant.Filled"
                                   ButtonType="ButtonType.Reset">
                            <MudIcon Icon="@Icons.Material.Filled.Clear" />
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code
{
    [Parameter, EditorRequired]
    public required PostSearchFilter Filter { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<PostSearchFilter> FilterChanged { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback OnValidSubmit { get; set; }

    private static readonly PostSearchFilter DefaultFilter = new();

    private bool _recentlyClearedForm = false;

    private async Task ClearFilter()
    {
        Filter = new PostSearchFilter();
        await FilterChanged.InvokeAsync(Filter);

        var uriWithQuery = new Uri(Navigation.Uri);
        var uriWithoutQuery = uriWithQuery.GetLeftPart(UriPartial.Path);

        _recentlyClearedForm = true;

        await JsRuntime.NavigateTo(uriWithoutQuery);
    }
}
