@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@implements IDisposable

<MudGrid Justify="Justify.Center">
    @foreach (var user in SearchResult.Users)
    {
        <MudItem xs="12" sm="8" md="6" lg="4" xl="4">
            <MudNavLink Class="card-link" Href="@($"/{user.UserName}")">
                <MudCard Class="pa-3 my-3 card-hover" Elevation="3">
                    <MudCardContent Class="d-flex flex-column align-center">
                        <MudImage Fluid Width="200" Style="border-radius: 50%" Src="@user.ProfilePictureUrl" loading="lazy" />
                         <MudTextField Label="Brugernavn" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail" ReadOnly T="string" Text="@user.UserName" />
                         <MudTextField Label="Område" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Place" ReadOnly T="string" Text="@user.DisplayLocation()" />
                         <MudTextField Label="Navn" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AccountCircle" ReadOnly T="string" Text="@user.DisplayName" />

                         @if (user.Children.Count > 0)
                        {
                            <MudText Class="my-4" Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.ChildCare" />Børn</MudText>
                            <MudChipSet ReadOnly Class="d-flex flex-wrap justify-start flex-grow-1 gap-3" T="MudBadge">
                                 @foreach (var child in user.Children.OrderBy(c => c.DateOfBirth))
                                {
                                    <MudBadge Color="Color.Success" Overlap Origin="Origin.TopCenter" Content="GetAgeString(child)">
                                         <MudChip Color="Color.Primary">@child.FirstName @child.LastName</MudChip>
                                        </MudBadge>
                                }
                            </MudChipSet>
                        }

                        @if (user.Categories.Count > 0)
                        {
                            <MudDivider Class="my-4" />

                            <MudText Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Interesseret i</MudText>
                            <MudChipSet ReadOnly Class="d-flex flex-wrap justify-center flex-grow-1" T="MudChip<string>">
                                 @foreach (var category in user.Categories)
                                {
                                    <MudChip Color="Color.Tertiary">@category</MudChip>
                                }
                            </MudChipSet>
                        }
                    </MudCardContent>
                </MudCard>
            </MudNavLink>
        </MudItem>
    }
</MudGrid>
<MudPagination Class="mt-5 d-flex justify-center" 
               BoundaryCount="0" 
               MiddleCount="3" 
               UserAttributes="@(new Dictionary<string, object> {["title"] = $"Viser {Filter.PageSize} ud af {SearchResult.TotalCount} resultater."})" 
               SelectedChanged="@SelectedPageChanged" 
               Variant="Variant.Filled" 
               Count="@(SearchResult.TotalCount / Filter.PageSize)"
               Selected="Filter.PageNumber"/>

@code {
    
    [Parameter]
    public required UserSearchFilter Filter { get; set; }

    [Parameter]
    public required UserSearchResult SearchResult { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPageChanged { get; set; }

    private string GetAgeString(ChildDto child)
    {
        return child.Age is not null ? $"{child.Age} år" : "?";
    }
    
    private IDisposable? _locationChangingHandler;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
	    if (firstRender)
	    {
		    await JsRuntime.InvokeVoidAsyncWithErrorHandling("scrollFunctions.loadScrollPosition");
	    }
    }

    private async ValueTask SaveScrollPosition()
    {
	    await JsRuntime.InvokeVoidAsyncWithErrorHandling("scrollFunctions.saveScrollPosition");
    }

    protected override void OnInitialized()
    {
	    _locationChangingHandler = Navigation
		    .RegisterLocationChangingHandler(async _ => await SaveScrollPosition());
    }

    public void Dispose()
    {
	    _locationChangingHandler?.Dispose();
    }
}
