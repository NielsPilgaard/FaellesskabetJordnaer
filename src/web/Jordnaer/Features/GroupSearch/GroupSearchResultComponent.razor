@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@implements IDisposable

<MudGrid Justify="Justify.SpaceEvenly" Spacing="2">
    @foreach (var group in SearchResult.Groups)
    {
        <MudItem xs="12" sm="6" md="4" lg="3" xl="3" xxl="3">
            <MudNavLink Class="card-link" Href="@($"/groups/{group.Name}")">
                <MudCard Class="pa-3 my-3 card-hover" Elevation="3">
                    <MudCardContent Class="d-flex flex-column align-center">
                        <MudTextField Label="Navn"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.AlternateEmail"
                                      ReadOnly
                                      T="string"
                                      Text="@group.Name"
                                      Class="mb-5" />

                        @if (!string.IsNullOrEmpty(group.ProfilePictureUrl))
                        {
                            <MudImage Fluid
                                      Width="200"
                                      Style="border-radius: 25%"
                                      Src="@group.ProfilePictureUrl"
                                      loading="lazy" />
                        }

                        <MudTextField Label="OmrÃ¥de"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Place"
                                      ReadOnly
                                      T="string"
                                      Text="@group.DisplayLocation()"
                                      Class="mb-4" />

                        @if (group.Categories.Length is not 0)
                        {
                            <div class="d-flex align-center">
                                <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Star" />
                                <MudText Typo="Typo.h6">Kategorier</MudText>
                            </div>
                            <MudChipSet ReadOnly Class="d-flex flex-wrap justify-center flex-grow-1" T="MudChip<string>">
                                @foreach (var category in group.Categories)
                                {
                                    <MudChip Color="Color.Tertiary">@category</MudChip>
                                }
                            </MudChipSet>
                        }
                    </MudCardContent>
                </MudCard>
            </MudNavLink>
        </MudItem>
    }
</MudGrid>
<MudPagination Class="mt-5 d-flex justify-center"
               BoundaryCount="0"
               MiddleCount="3"
               UserAttributes="@(new Dictionary<string, object> {["title"] = $"Viser {Filter.PageSize} ud af {SearchResult.TotalCount} resultater."})"
               SelectedChanged="@SelectedPageChanged"
               Variant="Variant.Filled"
               Count="@(SearchResult.TotalCount / Filter.PageSize)"
               Selected="Filter.PageNumber" />
@code {
    [Parameter]
    public required GroupSearchFilter Filter { get; set; }

    [Parameter]
    public required GroupSearchResult SearchResult { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPageChanged { get; set; }

    private IDisposable? _locationChangingHandler;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsyncWithErrorHandling("scrollFunctions.loadScrollPosition");
        }
    }

    private async ValueTask SaveScrollPosition()
    {
        await JsRuntime.InvokeVoidAsyncWithErrorHandling("scrollFunctions.saveScrollPosition");
    }

    protected override void OnInitialized()
    {
        _locationChangingHandler = Navigation
            .RegisterLocationChangingHandler(async _ => await SaveScrollPosition());
    }

    public void Dispose()
    {
        _locationChangingHandler?.Dispose();
    }
}
