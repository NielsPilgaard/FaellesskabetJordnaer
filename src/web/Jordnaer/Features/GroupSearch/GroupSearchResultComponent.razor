@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

<MudGrid Justify="Justify.SpaceEvenly" Spacing="1">
	@foreach (var group in SearchResult.Groups)
	{
		<MudItem xs="6" sm="4" md="4" lg="3" xl="3" xxl="3">
            <MudNavLink Class="card-link"  OnClick="async ()=> await SaveScrollPositionAndNavigateTo(group)">
				<MudCard Class="pa-3 my-3" Elevation="3">
					<MudCardContent Class="d-flex flex-column align-center">
						<MudTextField Label="Navn" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AlternateEmail" ReadOnly T="string" Text="@group.Name" Class="mb-5" />
						<MudImage Fluid Width="200" Style="border-radius: 25%" Src="@group.ProfilePictureUrl" loading="lazy" />
						<MudTextField Label="OmrÃ¥de" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Place" ReadOnly T="string" Text="@group.DisplayLocation()" />

						@if (group.Categories.Any())
						{
							<MudDivider Class="my-4" />

							<MudText Typo="Typo.h6"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Kategorier</MudText>
							<MudChipSet ReadOnly Class="d-flex flex-wrap justify-center flex-grow-1">
								@foreach (var category in group.Categories)
								{
									<MudChip Color="Color.Tertiary">@category</MudChip>
								}
							</MudChipSet>
						}
					</MudCardContent>
				</MudCard>
			</MudNavLink>
		</MudItem>
	}
</MudGrid>
<MudPagination Class="mt-5 d-flex justify-center"
               BoundaryCount="0"
               MiddleCount="3"
               UserAttributes="@(new Dictionary<string, object> {["title"] = $"Viser {Filter.PageSize} ud af {SearchResult.TotalCount} resultater."})"
               SelectedChanged="@SelectedPageChanged"
               Variant="Variant.Filled"
               Count="@(SearchResult.TotalCount / Filter.PageSize)"
               Selected="Filter.PageNumber" />
@code {
    [Parameter]
    public required GroupSearchFilter Filter { get; set; }

    [Parameter]
    public required GroupSearchResult SearchResult { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPageChanged { get; set; }

    private async Task SaveScrollPositionAndNavigateTo(GroupSlim group)
    {
        await JsRuntime.InvokeVoidAsync("scrollFunctions.saveScrollPosition");
        Navigation.NavigateTo($"/groups/{group.Name}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("scrollFunctions.loadScrollPosition");
        }
    }
}
