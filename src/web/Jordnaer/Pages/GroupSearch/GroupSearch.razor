@page "/groups"

@inject IGroupSearchService GroupSearchService
@inject NavigationManager Navigation
@inject GroupSearchResultCache Cache
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

@attribute [Sitemap]

<MetadataComponent Title="Grupper"
                   Description="Søg efter grupper" />

<MudLoading @bind-Loading="_isSearching" Darken Overlap>

    <GroupSearchForm OnValidSubmit="@Search" @bind-Filter="_filter" />

    @if (!_hasSearched)
    {
        return;
    }

    @if (_searchResult.TotalCount is 0)
    {
        <MudPaper Elevation="3" Class="pa-10 mt-5">
            <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" Class="align-center">
                <MudText Align="Align.Center" Typo="Typo.h6">Ingen grupper matchede søgningen.</MudText>
            </MudAlert>
        </MudPaper>
        return;
    }

    <SponsorAd Class="mt-5"
               ImageAlt="Reklame for Moon Creative"
               MobileImagePath="images/ads/mooncreative_mobile.png"
               DesktopImagePath="images/ads/mooncreative_mobile.png" 
               Link="https://www.mooncreative.dk/" />

    <GroupSearchResultComponent Filter="_filter" SearchResult="_searchResult" SelectedPageChanged="@OnSelectedPageChanged" />

</MudLoading>

@code {

    [SupplyParameterFromQuery]
    public string? Name { get; set; }
    [SupplyParameterFromQuery]
    public string[]? Categories { get; set; } = [];
    [SupplyParameterFromQuery]
    public int? WithinRadiusKilometers { get; set; }
    [SupplyParameterFromQuery]
    public string? Location { get; set; }
    [SupplyParameterFromQuery]
    public int? PageNumber { get; set; }
    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    private GroupSearchFilter _filter = new();
    private GroupSearchResult _searchResult = new();

    private bool _isSearching = false;
    private bool _hasSearched = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFromQueryString();
    }

    private async Task Search()
    {
        _isSearching = true;

        _searchResult = await GroupSearchService.GetGroupsAsync(_filter);

        await UpdateQueryString();
        
        if (_searchResult.TotalCount is 0)
        {
	        Snackbar.Add(
		        message: "Ingen grupper matchede søgningen.",
		        severity: Severity.Info,
		        options =>
		        {
			        options.VisibleStateDuration = 3500;
			        options.CloseAfterNavigation = true;
		        },
		        key: nameof(GroupSearch));
        }
        else
        {
	        Snackbar.Add(message: $"{_searchResult.TotalCount} grupper matchede søgningen.",
		        severity: Severity.Success,
		        options =>
		        {
			        options.VisibleStateDuration = 3500;
			        options.Icon = Icons.Material.Filled.ArrowDownward;
			        options.CloseAfterNavigation = true;
		        },
                key: nameof(GroupSearch));
        }

        _hasSearched = true;

        _isSearching = false;

        Cache.SearchFilter = _filter;
        Cache.SearchResult = _searchResult;
    }

    private static readonly Dictionary<string, object?> _queryStrings = [];
    private async Task UpdateQueryString()
    {
        _queryStrings[nameof(_filter.Name).ToLower()] = _filter.Name;
        _queryStrings[nameof(_filter.Categories).ToLower()] = _filter.Categories;
        _queryStrings[nameof(_filter.WithinRadiusKilometers).ToLower()] = _filter.WithinRadiusKilometers;
        _queryStrings[nameof(_filter.Location).ToLower()] = _filter.Location;
        _queryStrings[nameof(_filter.PageSize).ToLower()] = _filter.PageSize;
        _queryStrings[nameof(_filter.PageNumber).ToLower()] = _filter.PageNumber;

        var newUrl = Navigation.GetUriWithQueryParameters(_queryStrings);

        await JsRuntime.NavigateTo(newUrl);
    }

    private async ValueTask LoadFromQueryString()
    {
	    var queryStrings = new Uri(Navigation.Uri).Query;
        if (string.IsNullOrEmpty(queryStrings))
	    {
		    return;
	    }
        
        var filter = new GroupSearchFilter
        {
            Name = Name,
            Categories = Categories,
            WithinRadiusKilometers = WithinRadiusKilometers,
            Location = Location,
        };

        if (PageNumber is not null)
        {
            filter.PageNumber = PageNumber.Value;
        }

        if (PageSize is not null)
        {
            filter.PageSize = PageSize.Value;
        }

        if (filter.Equals(_filter))
        {
            // Filter in query string is the same as the current filter
            return;
        }

        _filter = filter;

        if (_filter.Equals(Cache.SearchFilter) && Cache.SearchResult is not null)
        {
            _searchResult = Cache.SearchResult;

            _hasSearched = true;
            _isSearching = false;

            return;
        }

        await Search();
    }

    private async Task OnSelectedPageChanged(int selectedPage)
    {
        _filter.PageNumber = selectedPage;
        await Search();
    }
}
