@page "/groups/{GroupName}"

@inject IGroupService GroupService
@inject IJSRuntime JsRuntime
@inject IProfileCache ProfileCache

<MudLoading @bind-Loading="_isLoading" Darken Overlap>

    @if (_group is null && _isLoading is false)
    {
        <NotFoundComponent Message="Vi fandt ingen gruppe med det navn, beklager!" />
        return;
    }
    @if (_group is null)
    {
        return;
    }

    <MetadataComponent Title="@_group.Name"
                       Description="@($"Beskrivelse af {_group.Name}:\n {_group.ShortDescription}")"
                       Image="@_group.ProfilePictureUrl" />

    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="JsRuntime.GoBackAsync" />

    <AuthorizeView>
        <Authorized>
            <OpenChat Disabled="_isMemberOfGroup"
                      Recipients="_recipients"
                      ChatName="@($"{GroupName} & {_currentUser?.DisplayName}")" />

            <MudButton Disabled="_isMemberOfGroup"
                       Class="mb-5"
                       Color="Color.Tertiary"
                       EndIcon="@Icons.Material.Filled.GroupAdd">
                Anmod om Medlemskab
            </MudButton>
        </Authorized>
    </AuthorizeView>

    <MudGrid>
        <MudItem xs="12">
            <GroupCard Group="_group" />
        </MudItem>

        @if (_group.Categories.Length > 0)
        {
            <MudDivider Class="my-5" />
            <MudItem xs="12">
                <MudText Typo="Typo.h5"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Kategorier</MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-start">
                <MudChipSet ReadOnly>
                    @foreach (var category in _group.Categories)
                    {
                        <MudChip Color="Color.Tertiary">@category</MudChip>
                    }
                </MudChipSet>
            </MudItem>
        }
    </MudGrid>
</MudLoading>

@code {
    [Parameter]
    public string? GroupName { get; set; }

    private GroupSlim? _group;
    private List<UserSlim> _groupAdmins = [];

    private bool _isLoading = true;
    private UserProfile? _currentUser;
    private bool _isMemberOfGroup = true;
    private IEnumerable<UserSlim> _recipients = [];

    protected override async Task OnInitializedAsync()
    {
        if (GroupName is null)
        {
	        _isLoading = false;
	        return;
        }

        var response = await GroupService.GetSlimGroupByNameAsync(GroupName);
	    response.Switch(
		    groupSlim => _group = groupSlim,
		    _ => { });

	    if (_group is null)
	    {
		    return;
	    }

	    _isMemberOfGroup = await GroupService
		    .IsGroupMemberAsync(_group.Id);

	    _currentUser = await ProfileCache.GetProfileAsync();
	    if (_currentUser is null)
	    {
		    return;
	    }

	    if (_isMemberOfGroup is false)
	    {
		    _groupAdmins = await GroupService
			    .GetGroupMembersByPredicateAsync(x =>
				    x.GroupId == _group.Id &&
				    x.PermissionLevel.HasFlag(PermissionLevel.Admin));

		    _recipients = _groupAdmins.Concat([_currentUser.ToUserSlim()]);
	    }

	    _isLoading = false;
    }
}
