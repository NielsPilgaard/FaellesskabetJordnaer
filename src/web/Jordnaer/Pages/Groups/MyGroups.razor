@page "/personal/groups"

@attribute [Authorize]

@inject IGroupService GroupService
@inject ISnackbar Snackbar

<MudButton Href="groups/create" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.GroupAdd">Opret gruppe</MudButton>

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
	@if (_pendingAccess.Length > 0)
	{
		<MudText Typo="Typo.h5" Class="font-open-sans-bold">Afventer Svar</MudText>
		<MudDivider />
		@foreach (var group in _pendingAccess)
		{
			<GroupSummaryCard UserGroupAccess="group"></GroupSummaryCard>
		}
	}

	<MudText Typo="Typo.h5" Class="font-open-sans-bold mt-10">Mine Grupper</MudText>
	@if (_memberOf.Length > 0)
	{
        <MudDivider Class="mb-5" />
		<MudGrid Justify="Justify.FlexStart" Spacing="3">
			@foreach (var group in _memberOf)
			{
				<MudItem xs="12" sm="6" md="4" lg="3">
					<GroupSummaryCard UserGroupAccess="group"></GroupSummaryCard>
				</MudItem>
			}
		</MudGrid>
	}
	else
	{
		<MudAlert Severity="Severity.Info">Du er ikke medlem af nogle grupper endnu.</MudAlert>
	}

	@if (_pendingAccess.Length is 0)
	{
		<MudText Typo="Typo.h5" Class="font-open-sans-bold mt-5">Afventer Svar</MudText>
		<MudDivider Class="mb-5" />
		<MudAlert Severity="Severity.Info">Du har ingen afventende anmodninger.</MudAlert>
	}

</MudLoading>
@code {
	private bool _isLoading = true;

    private List<UserGroupAccess>? _groupSummaries;

    private UserGroupAccess[] _memberOf = Array.Empty<UserGroupAccess>();

    private UserGroupAccess[] _pendingAccess = Array.Empty<UserGroupAccess>();

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
	    var authState = await AuthenticationState;
	    var userId = authState.User.GetId();

        _groupSummaries = await GroupService.GetSlimGroupsForUserAsync(userId);
        
        _memberOf = _groupSummaries
            .Where(x => x.MembershipStatus is MembershipStatus.Active)
            .ToArray();

        _pendingAccess = _groupSummaries
            .Where(x => x.MembershipStatus is MembershipStatus.PendingApprovalFromGroup or MembershipStatus.PendingApprovalFromUser)
            .ToArray();
        
        _isLoading = false;
    }
}
