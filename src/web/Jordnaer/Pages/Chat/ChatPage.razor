@page "/chat"
@page "/chat/{ChatId:guid}"

@inject IChatService ChatService
@inject IChatMessageCache ChatMessageCache
@inject IProfileCache ProfileCache
@inject IBrowserViewportService BrowserViewportService
@inject ChatSignalRClient ChatSignalRClient
@inject NavigationManager Navigation

@implements IAsyncDisposable

@attribute [Authorize]

<MetadataComponent Title="Chat"
                   Description="Her kan du skrive med andre" />

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    <MudPaper Elevation="2">

        <MudGrid Style="height: 80svh">

            @if ((_activeChat is null && _isMobile) || _isMobile is false)
            {
                <ChatSelector ActiveChat="_activeChat" Chats="_chats" SelectChatCallback="SelectChat" StartNewChatCallback="StartNewChat" />
            }

            @if (_isMobile is false)
            {
                <MudItem md="1" lg="1" xl="1" xxl="1" Class="py-0">
                    <MudDivider Vertical Style="width:3px" />
                </MudItem>
            }

            @if (_activeChat is not null)
            {
                <ChatMessageList @bind-ActiveChat="_activeChat"
                                 IsMobile="_isMobile"
                                 LastMessageWasSentSuccessfullyByCurrentUser="LastMessageWasSentSuccessfullyByCurrentUser" />
            }
        </MudGrid>
    </MudPaper>
</MudLoading>

@code {
    [Parameter]
    public Guid? ChatId { get; set; }

    private UserProfile _currentUser = null!;
    private List<ChatDto> _chats = [];
    private ChatDto? _activeChat;

    private bool _isLoading = true;
    private bool _isMobile = true;
    private readonly Guid _breakpointObserverId = Guid.NewGuid();

    private bool LastMessageWasSentSuccessfullyByCurrentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender is false)
        {
            return;
        }

        await BrowserViewportService.SubscribeAsync(
            observerId: _breakpointObserverId,
            lambda: async args =>
            {
                var isMobile = args.Breakpoint <= Breakpoint.Sm;
                if (isMobile != _isMobile)
                {
                    _isMobile = isMobile;
                    await InvokeAsync(StateHasChanged);
                }
            },
            fireImmediately: true);

    }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await ProfileCache.GetProfileAsync();
        if (currentUser is null)
        {
            return;
        }

        _currentUser = currentUser;

        _chats = await ChatService.GetChatsAsync(_currentUser.Id);
        if (ChatId is not null)
        {
            var chatFromRoute = _chats.FirstOrDefault(chat => chat.Id == ChatId);
            if (chatFromRoute is not null)
            {
                await SelectChat(chatFromRoute);
            }
        }

        await StartSignalR();

        _isLoading = false;
    }

    private async Task StartSignalR()
    {
        ChatSignalRClient.OnChatStarted(async chat =>
        {
            var lastChatMessage = chat.Messages.LastOrDefault();
            if (lastChatMessage is not null && lastChatMessage.SenderId == _currentUser.Id)
            {
                LastMessageWasSentSuccessfullyByCurrentUser = true;
                await InvokeAsync(StateHasChanged);
                return;
            }

            JordnaerMetrics.ChatStartedReceivedCounter.Add(1);

            var chatDto = chat.ToChatDto();
            chatDto.UnreadMessageCount++;
            _chats.Insert(0, chatDto);
            LastMessageWasSentSuccessfullyByCurrentUser = false;

            await InvokeAsync(StateHasChanged);
        });

        ChatSignalRClient.OnMessageReceived(async message =>
        {
            var chat = _chats.FirstOrDefault(chat => chat.Id == message.ChatId);
            if (chat is null)
            {
                return;
            }

            if (message.SenderId == _currentUser.Id)
            {
                LastMessageWasSentSuccessfullyByCurrentUser = true;
                await InvokeAsync(StateHasChanged);
                return;
            }

            JordnaerMetrics.ChatMessagesReceivedCounter.Add(1);

            chat.Messages.Add(message.ToChatMessageDto());

            if (_activeChat?.Id == chat.Id)
            {
                LastMessageWasSentSuccessfullyByCurrentUser = false;
                await ChatService.MarkMessagesAsReadAsync(_currentUser.Id, message.ChatId);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                chat.UnreadMessageCount++;
                _chats = _chats.OrderByDescending(c => c.UnreadMessageCount).ToList();
                await InvokeAsync(StateHasChanged);
            }
        });

        await ChatSignalRClient.StartAsync();
    }

    public async Task LoadMessages()
    {
        if (_activeChat is null)
        {
            return;
        }

        _activeChat.Messages = await ChatMessageCache.GetChatMessagesAsync(_currentUser.Id, _activeChat.Id);
    }

    private async Task SelectChat(ChatDto chat)
    {
        _activeChat = chat;

        await LoadMessages();

        if (chat.HasUnreadMessages)
        {
            await ChatService.MarkMessagesAsReadAsync(_currentUser.Id, _activeChat.Id);
            chat.UnreadMessageCount = 0;
        }

        MarkMessageIfSuccessfullySentByCurrentUser();

        if (_activeChat is not null && Navigation.Uri.EndsWith($"/chat/{_activeChat.Id}") is false)
        {
            Navigation.NavigateTo($"/chat/{_activeChat.Id}");
        }
    }

    private void MarkMessageIfSuccessfullySentByCurrentUser()
    {
        if (_activeChat is null)
        {
            return;
        }

        var lastMessage = _activeChat.Messages.LastOrDefault();
        if (lastMessage is null)
        {
            LastMessageWasSentSuccessfullyByCurrentUser = false;
            return;
        }

        LastMessageWasSentSuccessfullyByCurrentUser = lastMessage.SenderId == _currentUser.Id;
    }

    private async Task StartNewChat(IEnumerable<UserSlim> users)
    {
        var userList = users.ToList();
        if (userList.Count == 1)
        {
            var userIdsToFind = new[] { userList.First().Id, _currentUser.Id };
            var existingChat = _chats.FirstOrDefault(chat => chat.Recipients.Count == 2 &&
                                                             userIdsToFind.All(id => chat.Recipients.Any(recipient => recipient.Id == id)));
            if (existingChat is not null)
            {
                await SelectChat(existingChat);
                return;
            }
        }

        var newChat = new ChatDto
            {
                Id = NewId.NextGuid(),
                Recipients = [_currentUser.ToUserSlim()],
                LastMessageSentUtc = DateTime.UtcNow,
                StartedUtc = DateTime.UtcNow
            };

        foreach (var user in userList.Where(u => u.Id != _currentUser.Id))
        {
            newChat.Recipients.Add(new UserSlim
                {
                    DisplayName = user.DisplayName,
                    Id = user.Id,
                    ProfilePictureUrl = user.ProfilePictureUrl,
                    UserName = user.UserName
                });
        }

        _chats.Insert(0, newChat);

        await SelectChat(newChat);
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(_breakpointObserverId);
        await ChatSignalRClient.StopAsync();
    }
}
