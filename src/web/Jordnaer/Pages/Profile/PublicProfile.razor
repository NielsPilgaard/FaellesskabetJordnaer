@page "/{userName}"

@inject IProfileService ProfileService
@inject IJSRuntime JsRuntime
@inject IProfileCache ProfileCache

@attribute [StreamRendering]

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    @if (_profile is null && _isLoading is false)
    {
        <NotFoundComponent Message="Ingen person med det navn fundet." />
        return;
    }
    @if (_profile is null)
    {
        return;
    }

    <MetadataComponent Title="@($"{UserName}'s profil")"
                       Description="@($"Beskrivelse af {UserName}:\n {_profile?.Description}")"
                       Image="@_profile?.ProfilePictureUrl" />

    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="JsRuntime.GoBackAsync" />

    @if (_currentUserId != _profile?.Id)
    {
        <OpenChat Disabled="@_disableOpenChatButton" Recipients="_userIds" />
    }

    <MudGrid>
        <MudItem xs="12">
            <UserProfileCard Profile="_profile" UserName="@UserName" />
        </MudItem>

        @if (_profile!.ChildProfiles.Count > 0)
        {
            <MudDivider Class="my-5" />
            <MudText Typo="Typo.h5" Class="d-sm-none mt-3">
               BÃ¸rn
            </MudText>

            foreach (var child in _profile.ChildProfiles)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ChildProfileCard Child="child" />
                </MudItem>
            }
        }

        @if (_profile.Categories.Any())
        {
            <MudDivider Class="my-5" />
            <MudItem xs="12">
                <MudText Typo="Typo.h5"><MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Star" />Interesseret i</MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-start">
                <MudChipSet ReadOnly T="MudChip<Category>">
                 @foreach (var category in _profile.Categories)
                    {
                        <MudChip Color="Color.Tertiary">@category</MudChip>
                    }
                </MudChipSet>
            </MudItem>
        }
    </MudGrid>
</MudLoading>

@code {
    private ProfileDto? _profile;
    private bool _isLoading = true;
    private bool _disableOpenChatButton = true;
    private readonly List<UserSlim> _userIds = [];
    private string? _currentUserId;

    [Parameter]
    public required string UserName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ProfileService.GetUserProfile(UserName);
        response.Switch(success =>
        {
            _profile = success.Value;
            _userIds.Add(new UserSlim
                {
                    DisplayName = _profile.DisplayName,
                    Id = _profile.Id,
                    ProfilePictureUrl = _profile.ProfilePictureUrl,
                    UserName = _profile.UserName
                });
        }, notFound => { });

        var currentUserProfile = await ProfileCache.GetProfileAsync();
        if (currentUserProfile is not null)
        {
            _disableOpenChatButton = false;
            _userIds.Add(currentUserProfile.ToUserSlim());
            _currentUserId = currentUserProfile.Id;
        }

        _isLoading = false;
    }
}
