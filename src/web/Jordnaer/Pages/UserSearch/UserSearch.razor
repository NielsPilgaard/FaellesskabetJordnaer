@page "/users"
@using System.Collections.Concurrent

@inject IUserSearchService UserSearchService
@inject NavigationManager Navigation

<MetadataComponent Title="Mini Møder - Søg efter brugere"
                   Description="Søg efter brugere" />

<MudLoading @bind-Loading="_isSearching" Darken Overlap>

    <UserSearchForm OnValidSubmit="@Search" @bind-Filter="_filter" />

    @if (!_hasSearched)
    {
        return;
    }

    @if (_searchResult.TotalCount == 0)
    {
        <MudPaper Elevation="3" Class="pa-10 mt-5">
            <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" Class="align-center">
                <MudText Align="Align.Center" Typo="Typo.h6">Ingen brugere matchede søgningen.</MudText>
            </MudAlert>
        </MudPaper>
        return;
    }

    <SponsorAd Class="mt-5"
               ImageAlt="Reklame for Moon Creative"
               MobileImagePath="images/ads/mooncreative_mobile.png"
               DesktopImagePath="images/ads/mooncreative_mobile.png" />

    <UserSearchResultComponent Filter="_filter" SearchResult="_searchResult" SelectedPageChanged="@OnSelectedPageChanged" />
</MudLoading>

@code {
    [SupplyParameterFromQuery]
    public string? Name { get; set; }
    [SupplyParameterFromQuery]
    public string[]? Categories { get; set; } = [];
    [SupplyParameterFromQuery]
    public int? WithinRadiusKilometers { get; set; }
    [SupplyParameterFromQuery]
    public string? Location { get; set; }
    [SupplyParameterFromQuery]
    public int? MinimumChildAge { get; set; }
    [SupplyParameterFromQuery]
    public int? MaximumChildAge { get; set; }
    [SupplyParameterFromQuery]
    public string? ChildGender { get; set; }
    [SupplyParameterFromQuery]
    public int? PageNumber { get; set; }
    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    private UserSearchFilter _filter = new();
    private UserSearchResult _searchResult = new();

    private bool _isSearching = false;
    private bool _hasSearched = false;

    protected override void OnInitialized()
    {
        LoadFromQueryString();
    }

    private async Task Search()
    {
        _isSearching = true;
        _searchResult = await UserSearchService.GetUsersAsync(_filter);

        UpdateQueryString();

        _hasSearched = true;

        _isSearching = false;
    }

    private static readonly ConcurrentDictionary<string, object?> _queryStrings = [];
    private void UpdateQueryString()
    {
        _queryStrings[nameof(_filter.Name).ToLower()] = _filter.Name;
        _queryStrings[nameof(_filter.Categories).ToLower()] = _filter.Categories;
        _queryStrings[nameof(_filter.WithinRadiusKilometers).ToLower()] = _filter.WithinRadiusKilometers;
        _queryStrings[nameof(_filter.Location).ToLower()] = _filter.Location;
        _queryStrings[nameof(_filter.MinimumChildAge).ToLower()] = _filter.MinimumChildAge;
        _queryStrings[nameof(_filter.MaximumChildAge).ToLower()] = _filter.MaximumChildAge;
        _queryStrings[nameof(_filter.ChildGender).ToLower()] = _filter.ChildGender.HasValue ? _filter.ChildGender.ToString() : null;
        _queryStrings[nameof(_filter.PageSize).ToLower()] = _filter.PageSize;
        _queryStrings[nameof(_filter.PageNumber).ToLower()] = _filter.PageNumber;

        var newUrl = Navigation.GetUriWithQueryParameters(_queryStrings);
        Navigation.NavigateTo(newUrl);
    }

    private void LoadFromQueryString()
    {
        var filter = new UserSearchFilter
            {
                Name = Name,
                Categories = Categories,
                WithinRadiusKilometers = WithinRadiusKilometers,
                Location = Location,
                MinimumChildAge = MinimumChildAge,
                MaximumChildAge = MaximumChildAge
            };

        if (Enum.TryParse<Gender>(ChildGender, out var gender))
        {
            filter.ChildGender = gender;
        }

        if (PageNumber is not null)
        {
            filter.PageNumber = PageNumber.Value;
        }

        if (PageSize is not null)
        {
            filter.PageSize = PageSize.Value;
        }

        if (filter.Equals(_filter))
        {
            // Filter in query string is the same as the current filter
            return;
        }

        _filter = filter;
        StateHasChanged();
    }

    private async Task OnSelectedPageChanged(int selectedPage)
    {
        _filter.PageNumber = selectedPage;
        await Search();
    }
}
