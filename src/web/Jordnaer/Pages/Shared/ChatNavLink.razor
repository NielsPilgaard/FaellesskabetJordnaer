@inject IChatService ChatService
@inject NavigationManager Navigation
@inject CurrentUser CurrentUser
@inject UnreadMessageSignalRClient UnreadMessageSignalRClient
@inject ILogger<ChatNavLink> Logger

@implements IAsyncDisposable

@attribute [Authorize]

@if (_unreadMessageCount > 0)
{
    <a href="/chat">
        <MudBadge Origin="Origin.TopRight" Class="ml-2" Overlap Color="Color.Info" Content="@_unreadMessageCount">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Chat" />
        </MudBadge>
    </a>
}
else
{
    <MudIconButton Href="/chat"
                   Icon="@Icons.Material.Filled.Chat" />
}

@code {
    private int _unreadMessageCount = 0;
    private IDisposable? _locationChangedHandler;
    private string _currentUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUnreadMessageCount();

        _locationChangedHandler = Navigation.RegisterLocationChangingHandler(async context =>
        {
            _currentUrl = context.TargetLocation;
            // Only trigger when navigating to specific chats, not just the overall chat page
            if (_unreadMessageCount > 0 && context.TargetLocation.StartsWith("/chat/"))
            {
                await GetUnreadMessageCount();
            }
        });

        await StartSignalR();
    }

    private async ValueTask GetUnreadMessageCount()
    {
        if (CurrentUser.Id is null)
        {
            return;
        }

        var unreadMessageCount = await ChatService.GetUnreadMessageCountAsync(CurrentUser.Id);
        if (_unreadMessageCount != unreadMessageCount)
        {
            Logger.LogInformation("Updating Unread Message Count from {FromCount} to {ToCount}",
                _unreadMessageCount, unreadMessageCount);

            _unreadMessageCount = unreadMessageCount;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task StartSignalR()
    {
        UnreadMessageSignalRClient.OnChatStarted(async chat =>
        {
            if (chat.InitiatorId == CurrentUser.Id)
            {
                return;
            }

            // If we're not already in the new chat, increment unreadMessageCount
            if (_currentUrl.Contains(chat.Id.ToString()) is false)
            {
                _unreadMessageCount++;
                await InvokeAsync(StateHasChanged);
            }
        });

        UnreadMessageSignalRClient.OnMessageReceived(async message =>
        {
            if (message.SenderId == CurrentUser.Id)
            {
                return;
            }

            if (_currentUrl.Contains(message.ChatId.ToString()) is false)
            {
                Logger.LogInformation("Incrementing Unread Message Count by one from {FromCount}", _unreadMessageCount);
                _unreadMessageCount++;
                await InvokeAsync(StateHasChanged);
                StateHasChanged();
            }
        });

        await UnreadMessageSignalRClient.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        _locationChangedHandler?.Dispose();
        await UnreadMessageSignalRClient.StopAsync();
    }
}
