@using Blazored.LocalStorage
@using MudBlazor
@using MudBlazor.Utilities
@using Palette = Jordnaer.Features.Theme.JordnaerPalette
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@IsDarkMode" Theme="CustomTheme" />

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }
    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    private const string Key = "dark-mode";

    private static MudThemeProvider _mudThemeProvider = new();

    private static readonly MudTheme CustomTheme = new()
        {
            Typography = new Typography
            {
                Body1 = new Body1
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" }
                },
                Body2 = new Body2
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" }
                },
                Default = new Default
                {
                    FontFamily = new[] { "Open Sans Light", "Arial", "sans-serif" },
                    FontSize = "1rem"
                }
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var savedMode = await LocalStorage.GetItemAsync<bool?>(Key);
        if (savedMode.HasValue)
        {
            if (IsDarkMode != savedMode.Value)
            {
                IsDarkMode = savedMode.Value;
                StateHasChanged();
            }
        }
        else
        {
            await LocalStorage.SetItemAsync(Key, IsDarkMode);
        }
    }
}
