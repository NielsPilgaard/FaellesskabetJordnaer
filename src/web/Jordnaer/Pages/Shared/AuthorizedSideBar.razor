@inject IChatService ChatService
@inject NavigationManager Navigation
@inject CurrentUser CurrentUser
@inject UnreadMessageSignalRClient UnreadMessageSignalRClient

@implements IAsyncDisposable

@attribute [Authorize]

<MudDivider />
<Feature Name="@FeatureFlags.Contacts">
    <MudNavLink Match="NavLinkMatch.All" Href="/contacts" Icon="@Icons.Material.Filled.Contacts">Mine Kontakter</MudNavLink>
</Feature>

<MudNavLink Match="NavLinkMatch.Prefix" Href="/personal/groups" Icon="@Icons.Material.Filled.Groups">Mine Grupper</MudNavLink>

<MudNavLink Match="NavLinkMatch.Prefix"
            Href="/chat"
            Icon="@Icons.Material.Filled.Chat">
    @if (_unreadMessageCount > 0)
    {
        <MudBadge Origin="Origin.CenterRight" BadgeClass="ml-2" Color="Color.Info" Content="@(_unreadMessageCount > 99 ? "99+" : _unreadMessageCount.ToString())">
            <MudText>Chat</MudText>
        </MudBadge>
    }
    else
    {
        <MudText>Chat</MudText>
    }
</MudNavLink>
<Feature Name="@FeatureFlags.Events">
    <MudNavLink Match="NavLinkMatch.Prefix" Href="/events" Icon="@Icons.Material.Filled.EventAvailable">Mine Begivenheder</MudNavLink>
</Feature>
<MudDivider />

@code {
    private int _unreadMessageCount = 0;
    private IDisposable? _locationChangedHandler;
    private string _currentUrl = string.Empty;

    [Parameter]
    public bool IsSideBarOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
	    await GetUnreadMessageCount();

        _locationChangedHandler = Navigation.RegisterLocationChangingHandler(async context =>
        {
            _currentUrl = context.TargetLocation;
            // Only trigger when navigating to specific chats, not just the overall chat page
            if (_unreadMessageCount > 0 && context.TargetLocation.StartsWith("/chat/"))
            {
                await GetUnreadMessageCount();
            }
        });

        await StartSignalR();
    }

    private async ValueTask GetUnreadMessageCount()
    {
	    if (CurrentUser.Id is null)
	    {
		    return;
	    }

        var unreadMessageCount = await ChatService.GetUnreadMessageCountAsync(CurrentUser.Id);
        if (_unreadMessageCount != unreadMessageCount)
        {
            _unreadMessageCount = unreadMessageCount;
            if (IsSideBarOpen)
            {
	            await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task StartSignalR()
    {
        UnreadMessageSignalRClient.OnChatStarted(async chat =>
        {
	        if (chat.InitiatorId == CurrentUser.Id)
	        {
		        return;
	        }

            // If we're not already in the new chat, increment unreadMessageCount
            if (_currentUrl.Contains(chat.Id.ToString()) is false)
            {
                _unreadMessageCount++;
                if (IsSideBarOpen)
                {
	                await InvokeAsync(StateHasChanged);
                }
            }
        });

        UnreadMessageSignalRClient.OnMessageReceived(async message =>
        {
            if (message.SenderId == CurrentUser.Id)
            {
                return;
            }

            if (_currentUrl.Contains(message.ChatId.ToString()) is false)
            {
                _unreadMessageCount++;
                if (IsSideBarOpen)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        });

        await UnreadMessageSignalRClient.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        _locationChangedHandler?.Dispose();
        await UnreadMessageSignalRClient.StopAsync();
    }

}
