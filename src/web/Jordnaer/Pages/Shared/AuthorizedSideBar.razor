@inject IChatService ChatService
@inject NavigationManager Navigation
@implements IDisposable

<MudDivider />
<Feature Name="@FeatureFlags.Contacts">
    <MudNavLink Match="NavLinkMatch.All" Href="/contacts" Icon="@Icons.Material.Filled.Contacts">Mine Kontakter</MudNavLink>
</Feature>

<MudNavLink Match="NavLinkMatch.Prefix" Href="/personal/groups" Icon="@Icons.Material.Filled.Groups">Mine Grupper</MudNavLink>

<MudNavLink Match="NavLinkMatch.Prefix"
            Href="/chat"
            Icon="@Icons.Material.Filled.Chat">
    @if (_unreadMessageCount > 0)
    {
        <MudBadge Origin="Origin.CenterRight" BadgeClass="ml-2" Color="Color.Error" Content="@_unreadMessageCount">
            <MudText>Chat</MudText>
        </MudBadge>
    }
    else
    {
        <MudText>Chat</MudText>
    }
</MudNavLink>
<Feature Name="@FeatureFlags.Events">
    <MudNavLink Match="NavLinkMatch.Prefix" Href="/events" Icon="@Icons.Material.Filled.EventAvailable">Mine Begivenheder</MudNavLink>
</Feature>
<MudDivider />

@code {
    private int _unreadMessageCount = 0;
    private IDisposable? _locationChangedHandler;
    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(
            // ReSharper disable once AsyncVoidLambda
            callback: async _ => await GetUnreadMessageCount(),
            state: null,
            dueTime: TimeSpan.Zero,
            period: TimeSpan.FromMinutes(3));

        _locationChangedHandler = Navigation.RegisterLocationChangingHandler(async context =>
        {
            // Only trigger when navigating to specific chats, not just the overall chat page
            if (_unreadMessageCount > 0 && context.TargetLocation.StartsWith("/chat/"))
            {
                await GetUnreadMessageCount();
            }
        });
    }

    private async Task GetUnreadMessageCount()
    {
        var unreadMessageCount = await ChatService.GetUnreadMessageCountAsync();
        if (_unreadMessageCount != unreadMessageCount)
        {
            _unreadMessageCount = unreadMessageCount;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _locationChangedHandler?.Dispose();
        _timer?.Dispose();
    }
}
