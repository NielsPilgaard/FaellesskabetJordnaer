@inject NavigationManager Navigation
@inject IProfileCache ProfileCache
@inject ILocalStorageService LocalStorage

@rendermode @(InteractiveServer)

<ThemeProvider @bind-IsDarkMode="_isDarkMode" />

<MudMenu IconColor="Color.Primary" AnchorOrigin="Origin.BottomCenter">
    <ActivatorContent>
        <MudAvatar>
            <MudImage Src="@_profilePictureUrl" loading="lazy" />
        </MudAvatar>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Icon="@Icons.Material.Filled.Person" Href="profile">Redig√©r Profil</MudMenuItem>
        <MudMenuItem AutoClose="false"
                     OnClick="UpdateDarkMode"
                     Icon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                     IconColor="@(_isDarkMode ? Color.Dark : Color.Warning)">
            Skift tema
        </MudMenuItem>
        <MudDivider />
        @*TODO: Form below should submit on click of MudMenuItem*@
        <MudMenuItem Icon="@Icons.Material.Filled.Logout">
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
                <button type="submit" class="nav-link">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Log af
                </button>
            </form>
        </MudMenuItem>
    </ChildContent>
</MudMenu>
@code {
    private bool _isDarkMode { get; set; }

    private const string Key = "dark-mode";

    private string _profilePictureUrl = ProfileConstants.Default_Profile_Picture;

    private string? _currentUrl;

    protected override async Task OnInitializedAsync()
    {
        var userProfile = await ProfileCache.GetOrCreateProfileAsync();
        if (userProfile?.ProfilePictureUrl is not null)
        {
            _profilePictureUrl = userProfile.ProfilePictureUrl;
        }
        
        _currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async Task UpdateDarkMode()
    {
        _isDarkMode = !_isDarkMode;

        await LocalStorage.SetItemAsync(Key, _isDarkMode);

        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
	    _currentUrl = Navigation.ToBaseRelativePath(e.Location);
	    StateHasChanged();
    }

    public void Dispose() => Navigation.LocationChanged -= OnLocationChanged;
}
