@page "/Account/Manage/DeletePersonalData"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

@attribute [Sitemap]

<MetadataComponent Title="Slet personlige data"/>

<StatusMessage Message="@_message" />

<h3>Slet personlige data</h3>

<div class="alert alert-warning" role="alert">
	<p>
		<strong>Når du sletter disse data, vil din konto blive permanent fjernet, og dette kan ikke fortrydes.</strong>
	</p>
</div>

<div>
	<EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
		<DataAnnotationsValidator />
		<ValidationSummary class="text-danger" role="alert" />
		@if (_requirePassword)
		{
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Indtast venligst din adgangskode." />
				<label for="password" class="form-label">Adgangskode</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
		}
		<button class="w-100 btn btn-lg btn-danger" type="submit">Slet data og luk min konto</button>
	</EditForm>
</div>


@code {
    private AlertMessage? _message;
    private ApplicationUser _user = default!;
    private bool _requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _requirePassword = await UserManager.HasPasswordAsync(_user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (_requirePassword && !await UserManager.CheckPasswordAsync(_user, Input.Password))
        {
            _message = new AlertMessage("Forkert adgangskode.", true);
            return;
        }

        var result = await UserManager.DeleteAsync(_user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
