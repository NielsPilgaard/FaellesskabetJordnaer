@page "/Account/Manage/SetPassword"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Indstil adgangskode</PageTitle>

<h3>Indstil din adgangskode</h3>
<StatusMessage Message="@_message" />
<p class="text-info">
	Du har ikke et lokalt brugernavn/adgangskode til dette site. Tilføj en lokal
	konto, så du kan logge ind uden en ekstern login.
</p>
<div class="row">
	<div class="col-md-6">
		<EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Indtast venligst din nye adgangskode." />
				<label for="new-password" class="form-label">Ny adgangskode</label>
				<ValidationMessage For="() => Input.NewPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Bekræft venligst din nye adgangskode." />
				<label for="confirm-password" class="form-label">Bekræft adgangskode</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Indstil adgangskode</button>
		</EditForm>
	</div>
</div>


@code {
    private string? _message;
    private ApplicationUser _user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(_user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Din adgangskode er blevet sat.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Påkrævet.")]
        [StringLength(100, ErrorMessage = "{0} skal være mindst {2} og højest {1} karakterer langt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Ny adgangskode")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Bekræft ny adgangskode")]
        [Compare("NewPassword", ErrorMessage = "Dit nye kodeord og bekræftelses kodeordet matcher ikke.")]
        public string? ConfirmPassword { get; set; }
    }
}
