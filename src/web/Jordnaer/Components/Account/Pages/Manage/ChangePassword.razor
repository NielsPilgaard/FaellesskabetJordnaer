@page "/Account/Manage/ChangePassword"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Skift adgangskode</PageTitle>

<h3>Skift adgangskode</h3>
<StatusMessage Message="@_message" />
<div class="row">
	<div class="col-md-6">
		<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Indtast venligst din gamle adgangskode." />
				<label for="old-password" class="form-label">Gammel adgangskode</label>
				<ValidationMessage For="() => Input.OldPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Indtast venligst din nye adgangskode." />
				<label for="new-password" class="form-label">Ny adgangskode</label>
				<ValidationMessage For="() => Input.NewPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Bekræft venligst din nye adgangskode." />
				<label for="confirm-password" class="form-label">Bekræft adgangskode</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Opdater adgangskode</button>
		</EditForm>
	</div>
</div>


@code {
    private AlertMessage? _message;
    private ApplicationUser _user = default!;
    private bool _hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _hasPassword = await UserManager.HasPasswordAsync(_user);
        if (!_hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
	        _message = new AlertMessage(changePasswordResult.Errors.Select(error => error.Description), true);
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Din adgangskode er blevet ændret", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Påkrævet.")]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "Påkrævet.")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
