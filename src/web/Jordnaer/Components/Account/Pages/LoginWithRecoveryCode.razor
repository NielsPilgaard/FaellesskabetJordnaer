@page "/Account/LoginWithRecoveryCode"

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

@attribute [Sitemap]

<MetadataComponent Title="Verifikation af gendannelseskode"/>

<h1>Verifikation af gendannelseskode</h1>
<hr />
<StatusMessage Message="@_message" />
<p>
    Du har anmodet om at logge ind med en gendannelseskode. Dette login vil ikke blive husket, indtil du angiver
    en kode fra en autentifikations-app ved login eller deaktiverer 2FA og logger ind igen.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="Gendannelseskode" />
                <label for="recovery-code" class="form-label">Gendannelseskode</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log ind</button>
        </EditForm>
    </div>
</div>

@code {
    private AlertMessage? _message;
    private ApplicationUser _user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        _user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(_user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            _message = new AlertMessage("Ugyldig autentifikations kode indtastet.", true);
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Påkrævet.")]
        [DataType(DataType.Text)]
        [Display(Name = "Gendannelseskode")]
        public string RecoveryCode { get; set; } = "";
    }
}
