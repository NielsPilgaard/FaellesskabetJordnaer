@page "/Account/Login"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Small">
	<MudPaper Elevation="3" Class="pa-4">
		<EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
			<StatusMessage Message="@_errorMessage"/>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="navn@eksempel.com" />
				<label for="email" class="form-label">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="adgangskode" />
				<label for="password" class="form-label">Adgangskode</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="checkbox mb-3">
				<label class="form-label">
					<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
					Husk mig
				</label>
			</div>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" FullWidth>
				Log ind
			</MudButton>
			<MudDivider DividerType="DividerType.FullWidth" Class="my-3"/>
			<MudStack>
				<MudLink Href="/Account/ForgotPassword">Glemt din adgangskode?</MudLink>
				<MudLink Href="/Account/ResendEmailConfirmation">Gensend emailbekræftelse</MudLink>
				<MudButton ButtonType="ButtonType.Button" 
				           Variant="Variant.Filled" 
				           Color="Color.Success" 
				           FullWidth
				           Href="/Account/Register">
					Opret ny konto
				</MudButton>
			</MudStack>
		</EditForm>
	</MudPaper>
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <ExternalLoginPicker />
    </MudPaper>
</MudContainer>

@code {
    private AlertMessage? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = new AlertMessage("Ugyldigt login.", true);
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email er påkrævet.")]
        [EmailAddress(ErrorMessage = "Email skal være gyldig.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Påkrævet.")]
        [DataType(DataType.Password)]
        [Display(Name = "Adgangskode")]
        public string Password { get; set; } = "";

        [Display(Name = "Husk mig?")]
        public bool RememberMe { get; set; }
    }
}
